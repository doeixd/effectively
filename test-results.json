{"numTotalTestSuites":117,"numPassedTestSuites":94,"numFailedTestSuites":23,"numPendingTestSuites":0,"numTotalTests":273,"numPassedTests":258,"numFailedTests":15,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1750101873848,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["defineTask with Async Generators (Streaming)","Global defineTask"],"fullName":"defineTask with Async Generators (Streaming) Global defineTask should set __task_type to \"stream\" for an async generator","status":"passed","title":"should set __task_type to \"stream\" for an async generator","duration":2.134900000000016,"failureMessages":[],"meta":{}},{"ancestorTitles":["defineTask with Async Generators (Streaming)","Global defineTask"],"fullName":"defineTask with Async Generators (Streaming) Global defineTask should return an AsyncIterable when a streaming task is run","status":"passed","title":"should return an AsyncIterable when a streaming task is run","duration":2.8421000000000163,"failureMessages":[],"meta":{}},{"ancestorTitles":["defineTask with Async Generators (Streaming)","Global defineTask"],"fullName":"defineTask with Async Generators (Streaming) Global defineTask should set __task_type to \"request\" for a standard async function","status":"passed","title":"should set __task_type to \"request\" for a standard async function","duration":0.3439999999999941,"failureMessages":[],"meta":{}},{"ancestorTitles":["defineTask with Async Generators (Streaming)","Context-bound defineTask from createContext"],"fullName":"defineTask with Async Generators (Streaming) Context-bound defineTask from createContext should set __task_type to \"stream\" for a context-bound async generator","status":"passed","title":"should set __task_type to \"stream\" for a context-bound async generator","duration":0.510599999999954,"failureMessages":[],"meta":{}},{"ancestorTitles":["defineTask with Async Generators (Streaming)","Context-bound defineTask from createContext"],"fullName":"defineTask with Async Generators (Streaming) Context-bound defineTask from createContext should return an AsyncIterable when a context-bound streaming task is run","status":"passed","title":"should return an AsyncIterable when a context-bound streaming task is run","duration":1,"failureMessages":[],"meta":{}},{"ancestorTitles":["defineTask with Async Generators (Streaming)","Context-bound defineTask from createContext"],"fullName":"defineTask with Async Generators (Streaming) Context-bound defineTask from createContext should not prematurely close the scope for a streaming task","status":"passed","title":"should not prematurely close the scope for a streaming task","duration":0.922300000000007,"failureMessages":[],"meta":{}}],"startTime":1750101876781,"endTime":1750101876789.9224,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/async-generator-tasks.test.ts"},{"assertionResults":[{"ancestorTitles":["Bracket and Provide Integration"],"fullName":"Bracket and Provide Integration should properly provide resources from bracket to use tasks","status":"passed","title":"should properly provide resources from bracket to use tasks","duration":5.003600000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["Bracket and Provide Integration"],"fullName":"Bracket and Provide Integration should handle nested bracket provides correctly","status":"passed","title":"should handle nested bracket provides correctly","duration":1.4056999999999107,"failureMessages":[],"meta":{}}],"startTime":1750101877014,"endTime":1750101877020.4058,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/bracket-provide-integration.test.ts"},{"assertionResults":[{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","CircuitOpenError"],"fullName":"Circuit Breaker (circuit-breaker.ts) CircuitOpenError should create proper error with circuit ID","status":"passed","title":"should create proper error with circuit ID","duration":6.032500000000027,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","CircuitOpenError"],"fullName":"Circuit Breaker (circuit-breaker.ts) CircuitOpenError should have proper prototype chain","status":"passed","title":"should have proper prototype chain","duration":1.0755000000001473,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","CLOSED state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker CLOSED state behavior should allow requests to pass through when circuit is closed","status":"passed","title":"should allow requests to pass through when circuit is closed","duration":2.7916999999999916,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","CLOSED state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker CLOSED state behavior should record failures but allow requests until threshold is reached","status":"passed","title":"should record failures but allow requests until threshold is reached","duration":7.440599999999904,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","CLOSED state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker CLOSED state behavior should reset failure count on successful request","status":"passed","title":"should reset failure count on successful request","duration":5.419300000000021,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker OPEN state behavior should trip to OPEN state after reaching failure threshold","status":"passed","title":"should trip to OPEN state after reaching failure threshold","duration":2.536100000000033,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker OPEN state behavior should fail fast with CircuitOpenError when circuit is open","status":"failed","title":"should fail fast with CircuitOpenError when circuit is open","duration":5007.9883,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","HALF-OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker HALF-OPEN state behavior should transition to HALF-OPEN after timeout and succeed on trial request","status":"passed","title":"should transition to HALF-OPEN after timeout and succeed on trial request","duration":2.5088999999998123,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","HALF-OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker HALF-OPEN state behavior should return to OPEN state if trial request fails","status":"passed","title":"should return to OPEN state if trial request fails","duration":3.5766999999996187,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","HALF-OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker HALF-OPEN state behavior should only transition to HALF-OPEN after the full timeout period","status":"passed","title":"should only transition to HALF-OPEN after the full timeout period","duration":1.5478000000002794,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Configuration options"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Configuration options should respect custom failure threshold","status":"passed","title":"should respect custom failure threshold","duration":1.467899999999645,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Configuration options"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Configuration options should respect custom open state timeout","status":"passed","title":"should respect custom open state timeout","duration":1.069100000000617,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Configuration options"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Configuration options should respect custom isFailure predicate","status":"failed","title":"should respect custom isFailure predicate","duration":6.367599999999584,"failureMessages":["AssertionError: expected error to be instance of PermanentError\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:390:9\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)\n    at startTests (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1271:3)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Configuration options"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Configuration options should not count BacktrackSignal as failure by default","status":"failed","title":"should not count BacktrackSignal as failure by default","duration":4.768900000000031,"failureMessages":["AssertionError: expected [Function] to throw error including 'Real failure after backtrack' but got 'Unhandled error in workflow execution'\n    at Assertion.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1509:21)\n    at Assertion.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Assertion.methodWrapper (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1618:25)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:423:9\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Multiple circuit instances"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Multiple circuit instances should maintain separate state for different circuit IDs","status":"passed","title":"should maintain separate state for different circuit IDs","duration":1.0065999999997075,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Context integration"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Context integration should work without logger in context if context only has scope","status":"passed","title":"should work without logger in context if context only has scope","duration":0.7377999999998792,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Context integration"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Context integration should use context logger when available","status":"passed","title":"should use context logger when available","duration":1.5465999999996711,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Edge cases and error scenarios"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Edge cases and error scenarios should handle undefined and null values correctly as input","status":"passed","title":"should handle undefined and null values correctly as input","duration":0.5006000000003041,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Edge cases and error scenarios"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Edge cases and error scenarios should handle rapid successive calls correctly (trial request)","status":"failed","title":"should handle rapid successive calls correctly (trial request)","duration":5002.8772,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Edge cases and error scenarios"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Edge cases and error scenarios should maintain state across different run calls if ID is the same","status":"passed","title":"should maintain state across different run calls if ID is the same","duration":1.3469000000004598,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Recovery scenarios"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Recovery scenarios should handle mixed success/failure patterns correctly","status":"passed","title":"should handle mixed success/failure patterns correctly","duration":1.9526999999998225,"failureMessages":[],"meta":{}}],"startTime":1750101875127,"endTime":1750101885193.9526,"status":"failed","message":"","name":"C:/Users/Pglenn/effectively/test/circuit-breaker.test.ts"},{"assertionResults":[{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","pipe"],"fullName":"Composition Utilities (utils.ts) Core composition functions pipe should pipe a value through a sequence of functions","status":"passed","title":"should pipe a value through a sequence of functions","duration":4.423099999999977,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","pipe"],"fullName":"Composition Utilities (utils.ts) Core composition functions pipe should work with a single function","status":"passed","title":"should work with a single function","duration":0.4919999999999618,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","pipe"],"fullName":"Composition Utilities (utils.ts) Core composition functions pipe should return the value unchanged when no functions provided","status":"passed","title":"should return the value unchanged when no functions provided","duration":0.3103000000000975,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","pipe"],"fullName":"Composition Utilities (utils.ts) Core composition functions pipe should handle complex transformations","status":"passed","title":"should handle complex transformations","duration":0.2880000000000109,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","flow"],"fullName":"Composition Utilities (utils.ts) Core composition functions flow should compose functions from left to right","status":"passed","title":"should compose functions from left to right","duration":0.4287000000001626,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","flow"],"fullName":"Composition Utilities (utils.ts) Core composition functions flow should handle functions with multiple arguments in first function","status":"passed","title":"should handle functions with multiple arguments in first function","duration":0.38180000000011205,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","flow"],"fullName":"Composition Utilities (utils.ts) Core composition functions flow should handle single function","status":"passed","title":"should handle single function","duration":0.2594000000001415,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","flow"],"fullName":"Composition Utilities (utils.ts) Core composition functions flow should handle no functions","status":"passed","title":"should handle no functions","duration":0.2232000000001335,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should chain tasks together sequentially","status":"passed","title":"should chain tasks together sequentially","duration":2.1835000000000946,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should work with plain functions","status":"passed","title":"should work with plain functions","duration":0.680699999999888,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should handle single task workflow","status":"passed","title":"should handle single task workflow","duration":0.6299999999998818,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should pass context through workflow","status":"passed","title":"should pass context through workflow","duration":0.5994999999998072,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should chain alias work identically","status":"passed","title":"should chain alias work identically","duration":1.2135000000000673,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromValue"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromValue should start workflow with static value","status":"passed","title":"should start workflow with static value","duration":1.024499999999989,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromValue"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromValue should work with complex objects","status":"passed","title":"should work with complex objects","duration":0.45230000000015025,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromPromise"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromPromise should start workflow with promise","status":"passed","title":"should start workflow with promise","duration":0.8487999999999829,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromPromise"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromPromise should handle rejected promises","status":"passed","title":"should handle rejected promises","duration":4.901299999999992,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromPromiseFn"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromPromiseFn should start workflow with context-dependent function","status":"passed","title":"should start workflow with context-dependent function","duration":0.7630999999998949,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromPromiseFn"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromPromiseFn should pass context correctly","status":"passed","title":"should pass context correctly","duration":0.45900000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","map"],"fullName":"Composition Utilities (utils.ts) Pipeable operators map should transform values in a workflow","status":"passed","title":"should transform values in a workflow","duration":0.7714999999998327,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","map"],"fullName":"Composition Utilities (utils.ts) Pipeable operators map should work with async mapping functions","status":"passed","title":"should work with async mapping functions","duration":15.744500000000016,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","map"],"fullName":"Composition Utilities (utils.ts) Pipeable operators map should pass context to mapping function","status":"passed","title":"should pass context to mapping function","duration":0.5537000000001626,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","flatMap"],"fullName":"Composition Utilities (utils.ts) Pipeable operators flatMap should transform values into new tasks","status":"passed","title":"should transform values into new tasks","duration":0.698799999999892,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","flatMap"],"fullName":"Composition Utilities (utils.ts) Pipeable operators flatMap should pass context to flatMap function","status":"passed","title":"should pass context to flatMap function","duration":0.6299999999998818,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","pick"],"fullName":"Composition Utilities (utils.ts) Pipeable operators pick should pick specified keys from object","status":"passed","title":"should pick specified keys from object","duration":0.542699999999968,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","pick"],"fullName":"Composition Utilities (utils.ts) Pipeable operators pick should handle missing keys gracefully","status":"passed","title":"should handle missing keys gracefully","duration":0.5643999999999778,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Direct composition helpers","mapTask"],"fullName":"Composition Utilities (utils.ts) Direct composition helpers mapTask should transform task output","status":"passed","title":"should transform task output","duration":0.775899999999865,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Direct composition helpers","mapTask"],"fullName":"Composition Utilities (utils.ts) Direct composition helpers mapTask should work with async mappers","status":"passed","title":"should work with async mappers","duration":10.731400000000122,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Direct composition helpers","andThenTask"],"fullName":"Composition Utilities (utils.ts) Direct composition helpers andThenTask should chain tasks with direct composition","status":"passed","title":"should chain tasks with direct composition","duration":0.886299999999892,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","when"],"fullName":"Composition Utilities (utils.ts) Flow control and logic when should execute task when predicate is true","status":"passed","title":"should execute task when predicate is true","duration":1.16150000000016,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","when"],"fullName":"Composition Utilities (utils.ts) Flow control and logic when should skip task when predicate is false","status":"passed","title":"should skip task when predicate is false","duration":0.4692000000000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","when"],"fullName":"Composition Utilities (utils.ts) Flow control and logic when should work with async predicates","status":"passed","title":"should work with async predicates","duration":14.330600000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","when"],"fullName":"Composition Utilities (utils.ts) Flow control and logic when should pass context to predicate","status":"passed","title":"should pass context to predicate","duration":0.5906999999999698,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","unless"],"fullName":"Composition Utilities (utils.ts) Flow control and logic unless should execute task when predicate is false","status":"passed","title":"should execute task when predicate is false","duration":1.0809999999999036,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","unless"],"fullName":"Composition Utilities (utils.ts) Flow control and logic unless should skip task when predicate is true","status":"passed","title":"should skip task when predicate is true","duration":0.4031999999999698,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","doWhile"],"fullName":"Composition Utilities (utils.ts) Flow control and logic doWhile should execute task repeatedly while condition is true","status":"passed","title":"should execute task repeatedly while condition is true","duration":0.6405000000002019,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","doWhile"],"fullName":"Composition Utilities (utils.ts) Flow control and logic doWhile should not execute if condition is initially false","status":"passed","title":"should not execute if condition is initially false","duration":0.4654000000000451,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","doWhile"],"fullName":"Composition Utilities (utils.ts) Flow control and logic doWhile should respect abort signals","status":"passed","title":"should respect abort signals","duration":27.388500000000022,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","tap"],"fullName":"Composition Utilities (utils.ts) Flow control and logic tap should perform side effects without changing value","status":"passed","title":"should perform side effects without changing value","duration":0.6644000000001142,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","tap"],"fullName":"Composition Utilities (utils.ts) Flow control and logic tap should work with async side effects","status":"passed","title":"should work with async side effects","duration":14.648799999999937,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","tap"],"fullName":"Composition Utilities (utils.ts) Flow control and logic tap should pass context to side effect function","status":"passed","title":"should pass context to side effect function","duration":0.43790000000012697,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","sleep"],"fullName":"Composition Utilities (utils.ts) Flow control and logic sleep should pause workflow for specified duration","status":"passed","title":"should pause workflow for specified duration","duration":109.15429999999992,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","sleep"],"fullName":"Composition Utilities (utils.ts) Flow control and logic sleep should respect abort signals","status":"passed","title":"should respect abort signals","duration":0.8196999999997843,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","tapError"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience tapError should perform side effects on error without catching it","status":"passed","title":"should perform side effects on error without catching it","duration":1.8339999999998327,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","tapError"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience tapError should not perform side effect on success","status":"passed","title":"should not perform side effect on success","duration":0.5095000000001164,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","tapError"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience tapError should pass context to error handler","status":"passed","title":"should pass context to error handler","duration":1.4993999999999232,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","attempt"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience attempt should convert exceptions to Result type","status":"passed","title":"should convert exceptions to Result type","duration":1.0908999999999196,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","attempt"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience attempt should wrap successful results in Ok","status":"passed","title":"should wrap successful results in Ok","duration":1.072700000000168,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should retry failed tasks","status":"passed","title":"should retry failed tasks","duration":55.038099999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should fail after max attempts","status":"passed","title":"should fail after max attempts","duration":16.052700000000186,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should use exponential backoff","status":"passed","title":"should use exponential backoff","duration":317.1794,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should respect shouldRetry predicate","status":"passed","title":"should respect shouldRetry predicate","duration":46.340200000000095,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should not retry when shouldRetry returns false","status":"passed","title":"should not retry when shouldRetry returns false","duration":0.9830999999999221,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withName"],"fullName":"Composition Utilities (utils.ts) Task enhancers withName should attach name to task","status":"passed","title":"should attach name to task","duration":1.0027999999999793,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withName"],"fullName":"Composition Utilities (utils.ts) Task enhancers withName should preserve task functionality","status":"passed","title":"should preserve task functionality","duration":0.5760000000000218,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","memoize"],"fullName":"Composition Utilities (utils.ts) Task enhancers memoize should cache results based on input","status":"passed","title":"should cache results based on input","duration":28.458499999999958,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","memoize"],"fullName":"Composition Utilities (utils.ts) Task enhancers memoize should use deep equality for cache keys","status":"passed","title":"should use deep equality for cache keys","duration":0.7497000000000753,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","once"],"fullName":"Composition Utilities (utils.ts) Task enhancers once should execute task only once","status":"passed","title":"should execute task only once","duration":0.5855999999998858,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","once"],"fullName":"Composition Utilities (utils.ts) Task enhancers once should share the same promise across calls","status":"passed","title":"should share the same promise across calls","duration":109.62760000000003,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withTimeout"],"fullName":"Composition Utilities (utils.ts) Task enhancers withTimeout should timeout long-running tasks","status":"passed","title":"should timeout long-running tasks","duration":505.2259999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withTimeout"],"fullName":"Composition Utilities (utils.ts) Task enhancers withTimeout should complete fast tasks normally","status":"passed","title":"should complete fast tasks normally","duration":110.74170000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withTimeout"],"fullName":"Composition Utilities (utils.ts) Task enhancers withTimeout should clean up timers on abort","status":"failed","title":"should clean up timers on abort","duration":1024.2693999999997,"failureMessages":["Error: promise resolved \"'completed'\" instead of rejecting\n    at Assertion.__VITEST_REJECTS__ (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1805:21)\n    at Assertion.propertyGetter (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1486:27)\n    at Reflect.get (<anonymous>)\n    at Object.proxyGetter [as get] (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1577:22)\n    at C:\\Users\\Pglenn\\effectively\\test\\composition-utils.test.ts:954:29\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:146:14\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:11\n    at runWithTimeout (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:39:7)\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:17)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withState"],"fullName":"Composition Utilities (utils.ts) Task enhancers withState should manage stateful workflows and provide tools via context","status":"passed","title":"should manage stateful workflows and provide tools via context","duration":1.8278000000000247,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withState"],"fullName":"Composition Utilities (utils.ts) Task enhancers withState should initialize state with a static value","status":"passed","title":"should initialize state with a static value","duration":0.5833000000002357,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withState"],"fullName":"Composition Utilities (utils.ts) Task enhancers withState should throw if useState is used outside a withState context","status":"passed","title":"should throw if useState is used outside a withState context","duration":0.47859999999991487,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withThrottle"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withThrottle should throttle task execution","status":"passed","title":"should throttle task execution","duration":186.6185999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withThrottle"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withThrottle should respect abort signals in throttle queue","status":"failed","title":"should respect abort signals in throttle queue","duration":5016.909300000001,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withPoll"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withPoll should poll until condition is met","status":"passed","title":"should poll until condition is met","duration":1.1502000000000407,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withPoll"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withPoll should timeout if condition is never met","status":"failed","title":"should timeout if condition is never met","duration":5000.433999999999,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","createBatchingTask"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching createBatchingTask should batch multiple calls","status":"passed","title":"should batch multiple calls","duration":1.6987000000008265,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","createBatchingTask"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching createBatchingTask should handle batch function errors","status":"passed","title":"should handle batch function errors","duration":284.23409999999967,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","createBatchingTask"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching createBatchingTask should respect abort signals in batch queue","status":"failed","title":"should respect abort signals in batch queue","duration":6.844600000000355,"failureMessages":["AssertionError: expected WorkflowError: Task failed: This operatio… { …(6) } to satisfy [Function]\n    at Assertion.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1734:20)\n    at Assertion.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Assertion.methodWrapper (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1618:25)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withDebounce"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withDebounce should debounce rapid calls","status":"passed","title":"should debounce rapid calls","duration":1.5859000000000378,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withDebounce"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withDebounce should execute after debounce period","status":"passed","title":"should execute after debounce period","duration":1.6713999999992666,"failureMessages":[],"meta":{}}],"startTime":1750101875126,"endTime":1750101888084.6714,"status":"failed","message":"","name":"C:/Users/Pglenn/effectively/test/composition-utils.test.ts"},{"assertionResults":[{"ancestorTitles":["Core Execution Engine (run.ts)","createContext and basic execution"],"fullName":"Core Execution Engine (run.ts) createContext and basic execution should create a context and run a simple task","status":"passed","title":"should create a context and run a simple task","duration":4.858099999999922,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","createContext and basic execution"],"fullName":"Core Execution Engine (run.ts) createContext and basic execution should provide context to tasks","status":"passed","title":"should provide context to tasks","duration":0.6631999999999607,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","createContext and basic execution"],"fullName":"Core Execution Engine (run.ts) createContext and basic execution should handle context overrides","status":"passed","title":"should handle context overrides","duration":0.5189000000000306,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","createContext and basic execution"],"fullName":"Core Execution Engine (run.ts) createContext and basic execution should handle database operations through context","status":"passed","title":"should handle database operations through context","duration":2.2033000000001266,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Error handling and Result types"],"fullName":"Core Execution Engine (run.ts) Error handling and Result types should throw errors by default","status":"passed","title":"should throw errors by default","duration":2.5020999999999276,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Error handling and Result types"],"fullName":"Core Execution Engine (run.ts) Error handling and Result types should return Result when throw: false","status":"passed","title":"should return Result when throw: false","duration":1.1509000000000924,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Error handling and Result types"],"fullName":"Core Execution Engine (run.ts) Error handling and Result types should handle successful tasks with throw: false","status":"passed","title":"should handle successful tasks with throw: false","duration":0.9468999999999141,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Backtracking and control flow"],"fullName":"Core Execution Engine (run.ts) Backtracking and control flow should handle BacktrackSignal correctly","status":"failed","title":"should handle BacktrackSignal correctly","duration":11.015300000000025,"failureMessages":["WorkflowError: Unhandled error in workflow execution\n    at runImpl (C:\\Users\\Pglenn\\effectively\\src\\run.ts:961:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\Pglenn\\effectively\\test\\core-run.test.ts:198:22\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)\n    at startTests (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1271:3)"],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Backtracking and control flow"],"fullName":"Core Execution Engine (run.ts) Backtracking and control flow should identify BacktrackSignal with type guard","status":"passed","title":"should identify BacktrackSignal with type guard","duration":0.6778999999999087,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Backtracking and control flow"],"fullName":"Core Execution Engine (run.ts) Backtracking and control flow should prevent infinite backtracking loops","status":"failed","title":"should prevent infinite backtracking loops","duration":7.125999999999976,"failureMessages":["AssertionError: expected [Function] to throw error including 'Maximum backtrack limit' but got 'Unhandled error in workflow execution'\n    at Assertion.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1509:21)\n    at Assertion.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Assertion.methodWrapper (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1618:25)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\Pglenn\\effectively\\test\\core-run.test.ts:223:7\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)"],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context getters and safety"],"fullName":"Core Execution Engine (run.ts) Context getters and safety should throw ContextNotFoundError when getContext called outside run","status":"passed","title":"should throw ContextNotFoundError when getContext called outside run","duration":0.425899999999956,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context getters and safety"],"fullName":"Core Execution Engine (run.ts) Context getters and safety should return error Result when getContextSafe called outside run","status":"passed","title":"should return error Result when getContextSafe called outside run","duration":0.32189999999991414,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context getters and safety"],"fullName":"Core Execution Engine (run.ts) Context getters and safety should return undefined when getContextOrUndefined called outside run","status":"passed","title":"should return undefined when getContextOrUndefined called outside run","duration":0.3650000000000091,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context getters and safety"],"fullName":"Core Execution Engine (run.ts) Context getters and safety should work correctly inside run","status":"passed","title":"should work correctly inside run","duration":0.6059999999999945,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Smart, Local, and Global context functions"],"fullName":"Core Execution Engine (run.ts) Smart, Local, and Global context functions should use global context as fallback for smart functions","status":"passed","title":"should use global context as fallback for smart functions","duration":1.0260000000000673,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Smart, Local, and Global context functions"],"fullName":"Core Execution Engine (run.ts) Smart, Local, and Global context functions should throw errors for local-only functions when no context","status":"passed","title":"should throw errors for local-only functions when no context","duration":0.7092999999999847,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Smart, Local, and Global context functions"],"fullName":"Core Execution Engine (run.ts) Smart, Local, and Global context functions should work with global-only functions","status":"passed","title":"should work with global-only functions","duration":0.32780000000002474,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","provide function and context overrides"],"fullName":"Core Execution Engine (run.ts) provide function and context overrides should temporarily override context values","status":"failed","title":"should temporarily override context values","duration":2.2893000000001393,"failureMessages":["Error: Context is not available\n    at Object.use (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/unctx@2.4.1/node_modules/unctx/dist/index.mjs:31:15)\n    at provide (C:\\Users\\Pglenn\\effectively\\src\\run.ts:2322:53)\n    at C:\\Users\\Pglenn\\effectively\\test\\core-run.test.ts:328:33\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)"],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","provide function and context overrides"],"fullName":"Core Execution Engine (run.ts) provide function and context overrides should nest provide calls correctly","status":"failed","title":"should nest provide calls correctly","duration":5.335600000000113,"failureMessages":["AssertionError: expected { userId: 'test-user', counter: +0 } to deeply equal { userId: 'level1', counter: 42 }\n    at C:\\Users\\Pglenn\\effectively\\test\\core-run.test.ts:351:22\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)\n    at startTests (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1271:3)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/vitest@2.1.9_@types+node@22.15.31_jsdom@26.1.0/node_modules/vitest/dist/chunks/runBaseTests.3qpJUEJM.js:126:11"],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","provide function and context overrides"],"fullName":"Core Execution Engine (run.ts) provide function and context overrides should preserve scope in provide calls","status":"passed","title":"should preserve scope in provide calls","duration":1.0329000000001543,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context validation and merging"],"fullName":"Core Execution Engine (run.ts) Context validation and merging should validate context with schema","status":"passed","title":"should validate context with schema","duration":1.1429000000000542,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context validation and merging"],"fullName":"Core Execution Engine (run.ts) Context validation and merging should merge contexts correctly","status":"passed","title":"should merge contexts correctly","duration":0.49870000000009895,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context validation and merging"],"fullName":"Core Execution Engine (run.ts) Context validation and merging should require context properties","status":"passed","title":"should require context properties","duration":1.0698999999999614,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Dependency injection"],"fullName":"Core Execution Engine (run.ts) Dependency injection should create and use injection tokens","status":"failed","title":"should create and use injection tokens","duration":0.8072999999999411,"failureMessages":["Error: Context is not available\n    at Object.use (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/unctx@2.4.1/node_modules/unctx/dist/index.mjs:31:15)\n    at provide (C:\\Users\\Pglenn\\effectively\\src\\run.ts:2322:53)\n    at C:\\Users\\Pglenn\\effectively\\test\\core-run.test.ts:456:28\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:146:14\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:11\n    at runWithTimeout (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:39:7)\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:17)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)"],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Dependency injection"],"fullName":"Core Execution Engine (run.ts) Dependency injection should handle optional injection","status":"passed","title":"should handle optional injection","duration":0.8424999999999727,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Dependency injection"],"fullName":"Core Execution Engine (run.ts) Dependency injection should throw when required injection not found","status":"passed","title":"should throw when required injection not found","duration":2.5384999999998854,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Cancellation and abort signals"],"fullName":"Core Execution Engine (run.ts) Cancellation and abort signals should propagate abort signals to context scope","status":"passed","title":"should propagate abort signals to context scope","duration":0.7984999999998763,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Cancellation and abort signals"],"fullName":"Core Execution Engine (run.ts) Cancellation and abort signals should handle abort during execution","status":"passed","title":"should handle abort during execution","duration":21.25909999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Logging"],"fullName":"Core Execution Engine (run.ts) Logging should use provided logger","status":"failed","title":"should use provided logger","duration":1.3090000000001965,"failureMessages":["AssertionError: expected \"spy\" to be called at least once\n    at Proxy.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1448:13)\n    at Proxy.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1618:25)\n    at C:\\Users\\Pglenn\\effectively\\test\\core-run.test.ts:563:32\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)"],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Logging"],"fullName":"Core Execution Engine (run.ts) Logging should handle errors with logger","status":"passed","title":"should handle errors with logger","duration":1.9574999999999818,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Edge cases and error scenarios"],"fullName":"Core Execution Engine (run.ts) Edge cases and error scenarios should handle null/undefined inputs gracefully","status":"passed","title":"should handle null/undefined inputs gracefully","duration":1.3756999999998243,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Edge cases and error scenarios"],"fullName":"Core Execution Engine (run.ts) Edge cases and error scenarios should handle deeply nested task execution","status":"passed","title":"should handle deeply nested task execution","duration":1.1649999999999636,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Edge cases and error scenarios"],"fullName":"Core Execution Engine (run.ts) Edge cases and error scenarios should preserve context through complex async operations","status":"passed","title":"should preserve context through complex async operations","duration":23.89390000000003,"failureMessages":[],"meta":{}}],"startTime":1750101875485,"endTime":1750101875592.8938,"status":"failed","message":"","name":"C:/Users/Pglenn/effectively/test/core-run.test.ts"},{"assertionResults":[{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should perform parallel map and sequential reduce","status":"passed","title":"should perform parallel map and sequential reduce","duration":33.85829999999987,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should handle empty arrays","status":"passed","title":"should handle empty arrays","duration":0.5244999999999891,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should handle single element arrays","status":"passed","title":"should handle single element arrays","duration":13.432600000000093,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should work with complex data types","status":"passed","title":"should work with complex data types","duration":15.749900000000025,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should work with string concatenation","status":"passed","title":"should work with string concatenation","duration":1.1985999999999422,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should handle concurrency limits","status":"passed","title":"should handle concurrency limits","duration":92.57500000000005,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should handle task failures gracefully","status":"passed","title":"should handle task failures gracefully","duration":3.7032999999998992,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should filter array based on async predicate","status":"passed","title":"should filter array based on async predicate","duration":27.826000000000022,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should handle empty arrays","status":"passed","title":"should handle empty arrays","duration":0.7959000000000742,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should handle arrays where no items pass filter","status":"passed","title":"should handle arrays where no items pass filter","duration":14.36590000000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should handle arrays where all items pass filter","status":"passed","title":"should handle arrays where all items pass filter","duration":16.153099999999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should work with complex data types","status":"passed","title":"should work with complex data types","duration":31.855499999999893,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should respect concurrency limits","status":"passed","title":"should respect concurrency limits","duration":126.42000000000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should handle predicate task failures","status":"passed","title":"should handle predicate task failures","duration":29.370200000000068,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should maintain original order of elements","status":"passed","title":"should maintain original order of elements","duration":18.470399999999927,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should group items by key generated from async task","status":"passed","title":"should group items by key generated from async task","duration":33.207099999999855,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle empty arrays","status":"passed","title":"should handle empty arrays","duration":0.4408000000000811,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle arrays with single group","status":"passed","title":"should handle arrays with single group","duration":13.204899999999952,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should work with complex data types","status":"passed","title":"should work with complex data types","duration":19.59310000000005,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle numeric keys","status":"passed","title":"should handle numeric keys","duration":11.104800000000068,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should respect concurrency limits","status":"passed","title":"should respect concurrency limits","duration":94.93209999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle keying task failures","status":"passed","title":"should handle keying task failures","duration":16.379100000000108,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should maintain insertion order within groups","status":"passed","title":"should maintain insertion order within groups","duration":1.1416999999999007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle duplicate keys correctly","status":"passed","title":"should handle duplicate keys correctly","duration":13.667300000000068,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","Integration tests"],"fullName":"Data Processing (data-processing.ts) Integration tests should combine mapReduce with filter for complex processing","status":"passed","title":"should combine mapReduce with filter for complex processing","duration":16.513600000000224,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","Integration tests"],"fullName":"Data Processing (data-processing.ts) Integration tests should use groupBy with mapReduce for aggregation","status":"passed","title":"should use groupBy with mapReduce for aggregation","duration":30.097800000000007,"failureMessages":[],"meta":{}}],"startTime":1750101875305,"endTime":1750101875984.098,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/data-processing.test.ts"},{"assertionResults":[{"ancestorTitles":["Debug Provide"],"fullName":"Debug Provide should work with context-specific provide","status":"passed","title":"should work with context-specific provide","duration":4.395299999999963,"failureMessages":[],"meta":{}},{"ancestorTitles":["Debug Provide"],"fullName":"Debug Provide should work with global provide","status":"passed","title":"should work with global provide","duration":1.4365999999999985,"failureMessages":[],"meta":{}}],"startTime":1750101877427,"endTime":1750101877432.4365,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/debug-provide.test.ts"},{"assertionResults":[{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should execute simple do block with tasks","status":"passed","title":"should execute simple do block with tasks","duration":3.197499999999991,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle input values","status":"passed","title":"should handle input values","duration":0.7327000000000226,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle plain values with pure","status":"passed","title":"should handle plain values with pure","duration":0.46819999999996753,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle Promise values","status":"passed","title":"should handle Promise values","duration":1.0423999999999864,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle Result types - success case","status":"passed","title":"should handle Result types - success case","duration":2.199899999999957,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle Result types - error case","status":"passed","title":"should handle Result types - error case","duration":2.23599999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should propagate errors from tasks","status":"passed","title":"should propagate errors from tasks","duration":0.6242000000000303,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle try/catch in generators","status":"passed","title":"should handle try/catch in generators","duration":0.5127999999999702,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","context-specific doTask"],"fullName":"Do Notation context-specific doTask should work with typed context","status":"passed","title":"should work with typed context","duration":0.6487999999999943,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","context-specific doTask"],"fullName":"Do Notation context-specific doTask should work with doBlock for no-input workflows","status":"passed","title":"should work with doBlock for no-input workflows","duration":0.43659999999999854,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","conditional functions"],"fullName":"Do Notation conditional functions should execute doWhen with true condition","status":"passed","title":"should execute doWhen with true condition","duration":0.555499999999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","conditional functions"],"fullName":"Do Notation conditional functions should execute doWhen with false condition","status":"passed","title":"should execute doWhen with false condition","duration":0.3724000000000274,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","conditional functions"],"fullName":"Do Notation conditional functions should execute doUnless with false condition","status":"passed","title":"should execute doUnless with false condition","duration":0.5065999999999917,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","conditional functions"],"fullName":"Do Notation conditional functions should skip doUnless with true condition","status":"passed","title":"should skip doUnless with true condition","duration":0.3014999999999759,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","sequence function"],"fullName":"Do Notation sequence function should execute tasks in sequence and collect results","status":"passed","title":"should execute tasks in sequence and collect results","duration":0.9610999999999876,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","sequence function"],"fullName":"Do Notation sequence function should handle empty sequence","status":"passed","title":"should handle empty sequence","duration":0.37369999999998527,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","forEach function"],"fullName":"Do Notation forEach function should iterate over items and execute generator for each","status":"passed","title":"should iterate over items and execute generator for each","duration":0.5548000000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","forEach function"],"fullName":"Do Notation forEach function should handle empty array","status":"passed","title":"should handle empty array","duration":0.3526000000000522,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","integration tests"],"fullName":"Do Notation integration tests should handle complex workflow with multiple patterns","status":"passed","title":"should handle complex workflow with multiple patterns","duration":0.6702999999999975,"failureMessages":[],"meta":{}}],"startTime":1750101876524,"endTime":1750101876542.6704,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/do-notation.test.ts"},{"assertionResults":[{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should create a basic custom error type","status":"passed","title":"should create a basic custom error type","duration":2.086999999999989,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should create hierarchical error types","status":"passed","title":"should create hierarchical error types","duration":0.6681999999999562,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should create multi-level inheritance hierarchies","status":"passed","title":"should create multi-level inheritance hierarchies","duration":0.4498999999999569,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should handle custom constructor parameters","status":"passed","title":"should handle custom constructor parameters","duration":0.31130000000007385,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should maintain proper stack traces","status":"passed","title":"should maintain proper stack traces","duration":9.82809999999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should set constructor name properly","status":"passed","title":"should set constructor name properly","duration":0.268100000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should handle errors with no message","status":"passed","title":"should handle errors with no message","duration":0.5027000000000044,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorHandler"],"fullName":"Error Handling (errors.ts) createErrorHandler should create a typed error handler tuple","status":"passed","title":"should create a typed error handler tuple","duration":1.614500000000021,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorHandler"],"fullName":"Error Handling (errors.ts) createErrorHandler should provide correct error typing in handler","status":"passed","title":"should provide correct error typing in handler","duration":0.5687000000000353,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorHandler"],"fullName":"Error Handling (errors.ts) createErrorHandler should work with async handlers","status":"passed","title":"should work with async handlers","duration":12.738800000000083,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should catch and handle specific errors","status":"passed","title":"should catch and handle specific errors","duration":4.307800000000043,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should handle hierarchical errors correctly","status":"passed","title":"should handle hierarchical errors correctly","duration":0.5697999999999865,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should match handlers in order","status":"passed","title":"should match handlers in order","duration":0.7748999999998887,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should not catch BacktrackSignal errors","status":"failed","title":"should not catch BacktrackSignal errors","duration":8.199599999999919,"failureMessages":["WorkflowError: Unhandled error in workflow execution\n    at runImpl (C:\\Users\\Pglenn\\effectively\\src\\run.ts:961:11)\n    at C:\\Users\\Pglenn\\effectively\\test\\error-handling.test.ts:273:22\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)\n    at startTests (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1271:3)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/vitest@2.1.9_@types+node@22.15.31_jsdom@26.1.0/node_modules/vitest/dist/chunks/runBaseTests.3qpJUEJM.js:126:11"],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should rethrow unhandled errors","status":"passed","title":"should rethrow unhandled errors","duration":2.3579999999999472,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should pass context to error handlers","status":"passed","title":"should pass context to error handlers","duration":1.0182999999999538,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should handle async error handlers","status":"passed","title":"should handle async error handlers","duration":15.815599999999904,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should work with successful tasks","status":"passed","title":"should work with successful tasks","duration":1.3582000000001244,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should handle non-Error thrown values","status":"passed","title":"should handle non-Error thrown values","duration":1.0521000000001095,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should handle multiple error types in complex workflows","status":"passed","title":"should handle multiple error types in complex workflows","duration":1.0743999999999687,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should convert successful sync functions to Ok results","status":"passed","title":"should convert successful sync functions to Ok results","duration":0.4353000000000975,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should convert successful async functions to Ok results","status":"passed","title":"should convert successful async functions to Ok results","duration":12.283099999999877,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should convert thrown errors to Err results","status":"passed","title":"should convert thrown errors to Err results","duration":0.5334000000000287,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should convert async thrown errors to Err results","status":"passed","title":"should convert async thrown errors to Err results","duration":13.626199999999926,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should handle non-Error thrown values","status":"passed","title":"should handle non-Error thrown values","duration":0.3502000000000862,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should preserve function arguments","status":"passed","title":"should preserve function arguments","duration":0.41960000000017317,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should work with functions that return undefined","status":"passed","title":"should work with functions that return undefined","duration":0.31340000000000146,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should work with functions that return null","status":"passed","title":"should work with functions that return null","duration":0.22790000000009059,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should handle custom error types","status":"passed","title":"should handle custom error types","duration":0.5843000000002121,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should work with API-like functions","status":"passed","title":"should work with API-like functions","duration":0.5152000000000498,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","Integration with task workflows"],"fullName":"Error Handling (errors.ts) Integration with task workflows should integrate error boundaries with complex workflows","status":"passed","title":"should integrate error boundaries with complex workflows","duration":1.4217999999998483,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","Integration with task workflows"],"fullName":"Error Handling (errors.ts) Integration with task workflows should combine tryCatch with task workflows","status":"passed","title":"should combine tryCatch with task workflows","duration":0.7618999999999687,"failureMessages":[],"meta":{}}],"startTime":1750101875118,"endTime":1750101875217.762,"status":"failed","message":"","name":"C:/Users/Pglenn/effectively/test/error-handling.test.ts"},{"assertionResults":[{"ancestorTitles":["Global Provide Function Fix"],"fullName":"Global Provide Function Fix should properly enhance context when provide is called within existing context","status":"passed","title":"should properly enhance context when provide is called within existing context","duration":4.308299999999917,"failureMessages":[],"meta":{}},{"ancestorTitles":["Global Provide Function Fix"],"fullName":"Global Provide Function Fix should work with nested provide calls","status":"passed","title":"should work with nested provide calls","duration":1.1041000000000167,"failureMessages":[],"meta":{}}],"startTime":1750101877177,"endTime":1750101877183.104,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/global-provide-fix.test.ts"},{"assertionResults":[{"ancestorTitles":["Resource Management (bracket.ts)","withResource (bracket)"],"fullName":"Resource Management (bracket.ts) withResource (bracket) should acquire, use, and release resources correctly","status":"passed","title":"should acquire, use, and release resources correctly","duration":4.550800000000038,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResource (bracket)"],"fullName":"Resource Management (bracket.ts) withResource (bracket) should release resources even when use task throws","status":"passed","title":"should release resources even when use task throws","duration":3.759400000000028,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResource (bracket)"],"fullName":"Resource Management (bracket.ts) withResource (bracket) should handle errors in acquire phase","status":"passed","title":"should handle errors in acquire phase","duration":1.6258000000000266,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResource (bracket)"],"fullName":"Resource Management (bracket.ts) withResource (bracket) should handle errors in release phase","status":"passed","title":"should handle errors in release phase","duration":1.5720999999999776,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResource (bracket)"],"fullName":"Resource Management (bracket.ts) withResource (bracket) should handle errors in both use and release phases","status":"passed","title":"should handle errors in both use and release phases","duration":2.0096999999999525,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResource (bracket)"],"fullName":"Resource Management (bracket.ts) withResource (bracket) should work with complex resource merging","status":"passed","title":"should work with complex resource merging","duration":1.4187000000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Disposable and helper functions"],"fullName":"Resource Management (bracket.ts) Disposable and helper functions isDisposable and isAsyncDisposable should work correctly","status":"passed","title":"isDisposable and isAsyncDisposable should work correctly","duration":0.5672000000000139,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Disposable and helper functions"],"fullName":"Resource Management (bracket.ts) Disposable and helper functions asAsyncDisposable should adapt an object with a cleanup method","status":"passed","title":"asAsyncDisposable should adapt an object with a cleanup method","duration":0.6485000000000127,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Disposable and helper functions"],"fullName":"Resource Management (bracket.ts) Disposable and helper functions createResource should create a valid resource definition","status":"passed","title":"createResource should create a valid resource definition","duration":0.7074000000000069,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withDisposableResource"],"fullName":"Resource Management (bracket.ts) withDisposableResource should work with synchronous disposable resources","status":"passed","title":"should work with synchronous disposable resources","duration":0.7798000000000229,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withDisposableResource"],"fullName":"Resource Management (bracket.ts) withDisposableResource should work with asynchronous disposable resources","status":"passed","title":"should work with asynchronous disposable resources","duration":1.002999999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withDisposableResource"],"fullName":"Resource Management (bracket.ts) withDisposableResource should dispose resources even when use task fails","status":"passed","title":"should dispose resources even when use task fails","duration":1.2392999999999574,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResources (bracketMany)"],"fullName":"Resource Management (bracket.ts) withResources (bracketMany) should manage multiple resources correctly","status":"passed","title":"should manage multiple resources correctly","duration":1.1246000000000436,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResources (bracketMany)"],"fullName":"Resource Management (bracket.ts) withResources (bracketMany) should release acquired resources if a later acquisition fails","status":"passed","title":"should release acquired resources if a later acquisition fails","duration":1.0482999999999834,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","DatabaseConnection example class"],"fullName":"Resource Management (bracket.ts) DatabaseConnection example class should be constructable and disposable","status":"passed","title":"should be constructable and disposable","duration":3.1007999999999925,"failureMessages":[],"meta":{}}],"startTime":1750101876155,"endTime":1750101876182.1008,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/resource-management.test.ts"},{"assertionResults":[{"ancestorTitles":["Simple Bracket Test"],"fullName":"Simple Bracket Test should work with manual bracket pattern","status":"passed","title":"should work with manual bracket pattern","duration":3.7479000000000156,"failureMessages":[],"meta":{}}],"startTime":1750101877533,"endTime":1750101877536.7478,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/simple-bracket.test.ts"},{"assertionResults":[{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should execute tasks in parallel and return keyed results","status":"passed","title":"should execute tasks in parallel and return keyed results","duration":7.357300000000009,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should handle empty task object","status":"passed","title":"should handle empty task object","duration":0.9565999999999804,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should handle single task","status":"passed","title":"should handle single task","duration":0.6848999999999705,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should pass the same input to all tasks","status":"passed","title":"should pass the same input to all tasks","duration":0.8054000000000201,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should handle task failures correctly","status":"passed","title":"should handle task failures correctly","duration":3.133200000000045,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should maintain type safety","status":"passed","title":"should maintain type safety","duration":2.254099999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should respect context overrides","status":"passed","title":"should respect context overrides","duration":0.7422000000000253,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should execute onTrue task when predicate is true","status":"passed","title":"should execute onTrue task when predicate is true","duration":0.7787000000000148,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should execute onFalse task when predicate is false","status":"passed","title":"should execute onFalse task when predicate is false","duration":0.8933999999999855,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should work with async predicates","status":"passed","title":"should work with async predicates","duration":1.071200000000033,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should pass context to predicate","status":"passed","title":"should pass context to predicate","duration":0.6762000000000512,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should handle errors in predicate","status":"passed","title":"should handle errors in predicate","duration":0.8190999999999917,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should handle errors in branch tasks","status":"passed","title":"should handle errors in branch tasks","duration":3.2380999999999744,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should support different return types from branches","status":"passed","title":"should support different return types from branches","duration":0.9798999999999864,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should work with complex conditional logic","status":"passed","title":"should work with complex conditional logic","duration":0.9560999999999922,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should execute tasks in parallel and return typed tuple","status":"passed","title":"should execute tasks in parallel and return typed tuple","duration":1.4166999999999916,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should handle empty array","status":"passed","title":"should handle empty array","duration":0.6929000000000087,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should handle single task","status":"passed","title":"should handle single task","duration":0.48730000000000473,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should execute tasks in parallel","status":"passed","title":"should execute tasks in parallel","duration":0.7757000000000289,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should handle task failures","status":"passed","title":"should handle task failures","duration":1.4150999999999954,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should maintain order of results","status":"passed","title":"should maintain order of results","duration":1.2590000000000146,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should pass same input to all tasks","status":"passed","title":"should pass same input to all tasks","duration":0.49970000000001846,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","Integration tests"],"fullName":"Structured Concurrency (structured-concurrency.ts) Integration tests should combine forkJoin and ift for complex workflows","status":"passed","title":"should combine forkJoin and ift for complex workflows","duration":0.9605000000000246,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","Integration tests"],"fullName":"Structured Concurrency (structured-concurrency.ts) Integration tests should handle nested forkJoin operations","status":"passed","title":"should handle nested forkJoin operations","duration":0.5477999999999952,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","Integration tests"],"fullName":"Structured Concurrency (structured-concurrency.ts) Integration tests should handle complex predicate logic in ift","status":"passed","title":"should handle complex predicate logic in ift","duration":1.0779999999999745,"failureMessages":[],"meta":{}}],"startTime":1750101875775,"endTime":1750101875812.078,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/structured-concurrency.test.ts"},{"assertionResults":[{"ancestorTitles":["Telemetry (telemetry.ts)","withSpan"],"fullName":"Telemetry (telemetry.ts) withSpan should create a span, set status OK on success, and return task result","status":"passed","title":"should create a span, set status OK on success, and return task result","duration":9.010899999999992,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","withSpan"],"fullName":"Telemetry (telemetry.ts) withSpan should create a span, record exception, set status ERROR on failure, and re-throw","status":"passed","title":"should create a span, record exception, set status ERROR on failure, and re-throw","duration":3.0492000000000417,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","withSpan"],"fullName":"Telemetry (telemetry.ts) withSpan should fall back to logging when no tracer is available","status":"passed","title":"should fall back to logging when no tracer is available","duration":1.802599999999984,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","recordMetric"],"fullName":"Telemetry (telemetry.ts) recordMetric should record a counter metric","status":"passed","title":"should record a counter metric","duration":1.4545000000000528,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","recordMetric"],"fullName":"Telemetry (telemetry.ts) recordMetric should record a histogram metric","status":"passed","title":"should record a histogram metric","duration":1.3211000000000013,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","recordMetric"],"fullName":"Telemetry (telemetry.ts) recordMetric should fall back to logging when no meter is available","status":"passed","title":"should fall back to logging when no meter is available","duration":1.419399999999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","Higher-Level Enhancers"],"fullName":"Telemetry (telemetry.ts) Higher-Level Enhancers withTiming should record a histogram on success and failure","status":"passed","title":"withTiming should record a histogram on success and failure","duration":1.9011000000000422,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","Higher-Level Enhancers"],"fullName":"Telemetry (telemetry.ts) Higher-Level Enhancers withCounter should increment on success and failure","status":"passed","title":"withCounter should increment on success and failure","duration":3.7641000000000417,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","Higher-Level Enhancers"],"fullName":"Telemetry (telemetry.ts) Higher-Level Enhancers withObservability should call span, timer, and counter logic","status":"passed","title":"withObservability should call span, timer, and counter logic","duration":2.5738999999999805,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","Manual Span Helpers"],"fullName":"Telemetry (telemetry.ts) Manual Span Helpers addSpanAttributes should call setAttributes on the active span","status":"passed","title":"addSpanAttributes should call setAttributes on the active span","duration":0.7971999999999753,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","Manual Span Helpers"],"fullName":"Telemetry (telemetry.ts) Manual Span Helpers recordSpanException should call recordException on the active span","status":"passed","title":"recordSpanException should call recordException on the active span","duration":1.2364999999999782,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","Manual Span Helpers"],"fullName":"Telemetry (telemetry.ts) Manual Span Helpers getCurrentSpan should return the active span","status":"passed","title":"getCurrentSpan should return the active span","duration":0.3823000000000434,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","@traced Decorator"],"fullName":"Telemetry (telemetry.ts) @traced Decorator should wrap a class method with a span","status":"passed","title":"should wrap a class method with a span","duration":1.3242999999999938,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","@traced Decorator"],"fullName":"Telemetry (telemetry.ts) @traced Decorator should use class.method as default span name","status":"passed","title":"should use class.method as default span name","duration":0.5005999999999631,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","@traced Decorator"],"fullName":"Telemetry (telemetry.ts) @traced Decorator should not wrap if no tracer is present in context","status":"passed","title":"should not wrap if no tracer is present in context","duration":0.4145000000000323,"failureMessages":[],"meta":{}}],"startTime":1750101876353,"endTime":1750101876386.5005,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/telemetry.test.ts"}]}