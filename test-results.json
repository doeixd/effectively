{"numTotalTestSuites":117,"numPassedTestSuites":99,"numFailedTestSuites":18,"numPendingTestSuites":0,"numTotalTests":273,"numPassedTests":263,"numFailedTests":10,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1750122937454,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["defineTask with Async Generators (Streaming)","Global defineTask"],"fullName":"defineTask with Async Generators (Streaming) Global defineTask should set __task_type to \"stream\" for an async generator","status":"passed","title":"should set __task_type to \"stream\" for an async generator","duration":5.652229999999918,"failureMessages":[],"meta":{}},{"ancestorTitles":["defineTask with Async Generators (Streaming)","Global defineTask"],"fullName":"defineTask with Async Generators (Streaming) Global defineTask should return an AsyncIterable when a streaming task is run","status":"passed","title":"should return an AsyncIterable when a streaming task is run","duration":10.779138999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["defineTask with Async Generators (Streaming)","Global defineTask"],"fullName":"defineTask with Async Generators (Streaming) Global defineTask should set __task_type to \"request\" for a standard async function","status":"passed","title":"should set __task_type to \"request\" for a standard async function","duration":2.2194460000000618,"failureMessages":[],"meta":{}},{"ancestorTitles":["defineTask with Async Generators (Streaming)","Context-bound defineTask from createContext"],"fullName":"defineTask with Async Generators (Streaming) Context-bound defineTask from createContext should set __task_type to \"stream\" for a context-bound async generator","status":"passed","title":"should set __task_type to \"stream\" for a context-bound async generator","duration":1.9886619999999766,"failureMessages":[],"meta":{}},{"ancestorTitles":["defineTask with Async Generators (Streaming)","Context-bound defineTask from createContext"],"fullName":"defineTask with Async Generators (Streaming) Context-bound defineTask from createContext should return an AsyncIterable when a context-bound streaming task is run","status":"passed","title":"should return an AsyncIterable when a context-bound streaming task is run","duration":1.6306560000000445,"failureMessages":[],"meta":{}},{"ancestorTitles":["defineTask with Async Generators (Streaming)","Context-bound defineTask from createContext"],"fullName":"defineTask with Async Generators (Streaming) Context-bound defineTask from createContext should not prematurely close the scope for a streaming task","status":"passed","title":"should not prematurely close the scope for a streaming task","duration":0.9524429999999029,"failureMessages":[],"meta":{}}],"startTime":1750122938598,"endTime":1750122938622.9524,"status":"passed","message":"","name":"/home/patrick/Projects/effectively/test/async-generator-tasks.test.ts"},{"assertionResults":[{"ancestorTitles":["Bracket and Provide Integration"],"fullName":"Bracket and Provide Integration should properly provide resources from bracket to use tasks","status":"passed","title":"should properly provide resources from bracket to use tasks","duration":6.073102999999946,"failureMessages":[],"meta":{}},{"ancestorTitles":["Bracket and Provide Integration"],"fullName":"Bracket and Provide Integration should handle nested bracket provides correctly","status":"passed","title":"should handle nested bracket provides correctly","duration":1.5315500000000384,"failureMessages":[],"meta":{}}],"startTime":1750122938069,"endTime":1750122938076.5315,"status":"passed","message":"","name":"/home/patrick/Projects/effectively/test/bracket-provide-integration.test.ts"},{"assertionResults":[{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","CircuitOpenError"],"fullName":"Circuit Breaker (circuit-breaker.ts) CircuitOpenError should create proper error with circuit ID","status":"passed","title":"should create proper error with circuit ID","duration":4.294448999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","CircuitOpenError"],"fullName":"Circuit Breaker (circuit-breaker.ts) CircuitOpenError should have proper prototype chain","status":"passed","title":"should have proper prototype chain","duration":0.8267199999999093,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","CLOSED state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker CLOSED state behavior should allow requests to pass through when circuit is closed","status":"passed","title":"should allow requests to pass through when circuit is closed","duration":4.162878999999975,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","CLOSED state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker CLOSED state behavior should record failures but allow requests until threshold is reached","status":"passed","title":"should record failures but allow requests until threshold is reached","duration":7.782062999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","CLOSED state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker CLOSED state behavior should reset failure count on successful request","status":"passed","title":"should reset failure count on successful request","duration":3.2847600000000057,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker OPEN state behavior should trip to OPEN state after reaching failure threshold","status":"passed","title":"should trip to OPEN state after reaching failure threshold","duration":3.485918999999967,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker OPEN state behavior should fail fast with CircuitOpenError when circuit is open","status":"failed","title":"should fail fast with CircuitOpenError when circuit is open","duration":5009.798955,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:581:17)\n    at processTimers (node:internal/timers:519:7)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","HALF-OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker HALF-OPEN state behavior should transition to HALF-OPEN after timeout and succeed on trial request","status":"passed","title":"should transition to HALF-OPEN after timeout and succeed on trial request","duration":10.518882999999732,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","HALF-OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker HALF-OPEN state behavior should return to OPEN state if trial request fails","status":"passed","title":"should return to OPEN state if trial request fails","duration":5.918993000000228,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","HALF-OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker HALF-OPEN state behavior should only transition to HALF-OPEN after the full timeout period","status":"passed","title":"should only transition to HALF-OPEN after the full timeout period","duration":4.362659999999778,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Configuration options"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Configuration options should respect custom failure threshold","status":"passed","title":"should respect custom failure threshold","duration":5.5416519999998854,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Configuration options"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Configuration options should respect custom open state timeout","status":"passed","title":"should respect custom open state timeout","duration":5.599379999999655,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Configuration options"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Configuration options should respect custom isFailure predicate","status":"passed","title":"should respect custom isFailure predicate","duration":7.886365000000296,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Configuration options"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Configuration options should not count BacktrackSignal as failure by default","status":"passed","title":"should not count BacktrackSignal as failure by default","duration":4.98095099999955,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Multiple circuit instances"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Multiple circuit instances should maintain separate state for different circuit IDs","status":"passed","title":"should maintain separate state for different circuit IDs","duration":3.5557940000007875,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Context integration"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Context integration should work without logger in context if context only has scope","status":"passed","title":"should work without logger in context if context only has scope","duration":1.0578130000003512,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Context integration"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Context integration should use context logger when available","status":"passed","title":"should use context logger when available","duration":1.3870859999997265,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Edge cases and error scenarios"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Edge cases and error scenarios should handle undefined and null values correctly as input","status":"passed","title":"should handle undefined and null values correctly as input","duration":0.9969639999999345,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Edge cases and error scenarios"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Edge cases and error scenarios should handle rapid successive calls correctly (trial request)","status":"failed","title":"should handle rapid successive calls correctly (trial request)","duration":5001.970657999999,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:581:17)\n    at processTimers (node:internal/timers:519:7)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Edge cases and error scenarios"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Edge cases and error scenarios should maintain state across different run calls if ID is the same","status":"passed","title":"should maintain state across different run calls if ID is the same","duration":2.7302980000004027,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Recovery scenarios"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Recovery scenarios should handle mixed success/failure patterns correctly","status":"passed","title":"should handle mixed success/failure patterns correctly","duration":6.63441899999998,"failureMessages":[],"meta":{}}],"startTime":1750122938070,"endTime":1750122948171.6345,"status":"failed","message":"","name":"/home/patrick/Projects/effectively/test/circuit-breaker.test.ts"},{"assertionResults":[{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","pipe"],"fullName":"Composition Utilities (utils.ts) Core composition functions pipe should pipe a value through a sequence of functions","status":"passed","title":"should pipe a value through a sequence of functions","duration":3.5676789999999983,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","pipe"],"fullName":"Composition Utilities (utils.ts) Core composition functions pipe should work with a single function","status":"passed","title":"should work with a single function","duration":2.560771000000045,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","pipe"],"fullName":"Composition Utilities (utils.ts) Core composition functions pipe should return the value unchanged when no functions provided","status":"passed","title":"should return the value unchanged when no functions provided","duration":1.0664900000000443,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","pipe"],"fullName":"Composition Utilities (utils.ts) Core composition functions pipe should handle complex transformations","status":"passed","title":"should handle complex transformations","duration":1.3675409999999601,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","flow"],"fullName":"Composition Utilities (utils.ts) Core composition functions flow should compose functions from left to right","status":"passed","title":"should compose functions from left to right","duration":0.9850010000000111,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","flow"],"fullName":"Composition Utilities (utils.ts) Core composition functions flow should handle functions with multiple arguments in first function","status":"passed","title":"should handle functions with multiple arguments in first function","duration":0.40198800000007395,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","flow"],"fullName":"Composition Utilities (utils.ts) Core composition functions flow should handle single function","status":"passed","title":"should handle single function","duration":0.3181459999999561,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","flow"],"fullName":"Composition Utilities (utils.ts) Core composition functions flow should handle no functions","status":"passed","title":"should handle no functions","duration":0.33074099999998907,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should chain tasks together sequentially","status":"passed","title":"should chain tasks together sequentially","duration":9.790988000000084,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should work with plain functions","status":"passed","title":"should work with plain functions","duration":1.0694760000000088,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should handle single task workflow","status":"passed","title":"should handle single task workflow","duration":1.8722989999999982,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should pass context through workflow","status":"passed","title":"should pass context through workflow","duration":2.3712600000000066,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should chain alias work identically","status":"passed","title":"should chain alias work identically","duration":3.4793800000001056,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromValue"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromValue should start workflow with static value","status":"passed","title":"should start workflow with static value","duration":1.1931970000000547,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromValue"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromValue should work with complex objects","status":"passed","title":"should work with complex objects","duration":0.9006529999999202,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromPromise"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromPromise should start workflow with promise","status":"passed","title":"should start workflow with promise","duration":1.1959419999999454,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromPromise"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromPromise should handle rejected promises","status":"passed","title":"should handle rejected promises","duration":5.405083999999988,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromPromiseFn"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromPromiseFn should start workflow with context-dependent function","status":"passed","title":"should start workflow with context-dependent function","duration":2.9312340000000177,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromPromiseFn"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromPromiseFn should pass context correctly","status":"passed","title":"should pass context correctly","duration":1.893713000000048,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","map"],"fullName":"Composition Utilities (utils.ts) Pipeable operators map should transform values in a workflow","status":"passed","title":"should transform values in a workflow","duration":5.505785999999944,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","map"],"fullName":"Composition Utilities (utils.ts) Pipeable operators map should work with async mapping functions","status":"passed","title":"should work with async mapping functions","duration":13.457217000000014,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","map"],"fullName":"Composition Utilities (utils.ts) Pipeable operators map should pass context to mapping function","status":"passed","title":"should pass context to mapping function","duration":0.9284559999999829,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","flatMap"],"fullName":"Composition Utilities (utils.ts) Pipeable operators flatMap should transform values into new tasks","status":"passed","title":"should transform values into new tasks","duration":1.098433,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","flatMap"],"fullName":"Composition Utilities (utils.ts) Pipeable operators flatMap should pass context to flatMap function","status":"passed","title":"should pass context to flatMap function","duration":0.9843409999999722,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","pick"],"fullName":"Composition Utilities (utils.ts) Pipeable operators pick should pick specified keys from object","status":"passed","title":"should pick specified keys from object","duration":1.1044429999999466,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","pick"],"fullName":"Composition Utilities (utils.ts) Pipeable operators pick should handle missing keys gracefully","status":"passed","title":"should handle missing keys gracefully","duration":4.194847999999979,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Direct composition helpers","mapTask"],"fullName":"Composition Utilities (utils.ts) Direct composition helpers mapTask should transform task output","status":"passed","title":"should transform task output","duration":3.1122930000000224,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Direct composition helpers","mapTask"],"fullName":"Composition Utilities (utils.ts) Direct composition helpers mapTask should work with async mappers","status":"passed","title":"should work with async mappers","duration":12.801589000000035,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Direct composition helpers","andThenTask"],"fullName":"Composition Utilities (utils.ts) Direct composition helpers andThenTask should chain tasks with direct composition","status":"passed","title":"should chain tasks with direct composition","duration":1.574946999999952,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","when"],"fullName":"Composition Utilities (utils.ts) Flow control and logic when should execute task when predicate is true","status":"passed","title":"should execute task when predicate is true","duration":1.716590999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","when"],"fullName":"Composition Utilities (utils.ts) Flow control and logic when should skip task when predicate is false","status":"passed","title":"should skip task when predicate is false","duration":0.9034480000000258,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","when"],"fullName":"Composition Utilities (utils.ts) Flow control and logic when should work with async predicates","status":"passed","title":"should work with async predicates","duration":17.833083999999985,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","when"],"fullName":"Composition Utilities (utils.ts) Flow control and logic when should pass context to predicate","status":"passed","title":"should pass context to predicate","duration":4.824628000000075,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","unless"],"fullName":"Composition Utilities (utils.ts) Flow control and logic unless should execute task when predicate is false","status":"passed","title":"should execute task when predicate is false","duration":2.6050780000000486,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","unless"],"fullName":"Composition Utilities (utils.ts) Flow control and logic unless should skip task when predicate is true","status":"passed","title":"should skip task when predicate is true","duration":2.7452710000000025,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","doWhile"],"fullName":"Composition Utilities (utils.ts) Flow control and logic doWhile should execute task repeatedly while condition is true","status":"passed","title":"should execute task repeatedly while condition is true","duration":1.7736660000000484,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","doWhile"],"fullName":"Composition Utilities (utils.ts) Flow control and logic doWhile should not execute if condition is initially false","status":"passed","title":"should not execute if condition is initially false","duration":0.7703410000000304,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","doWhile"],"fullName":"Composition Utilities (utils.ts) Flow control and logic doWhile should respect abort signals","status":"passed","title":"should respect abort signals","duration":26.12560300000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","tap"],"fullName":"Composition Utilities (utils.ts) Flow control and logic tap should perform side effects without changing value","status":"passed","title":"should perform side effects without changing value","duration":0.945412000000033,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","tap"],"fullName":"Composition Utilities (utils.ts) Flow control and logic tap should work with async side effects","status":"passed","title":"should work with async side effects","duration":12.176698999999985,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","tap"],"fullName":"Composition Utilities (utils.ts) Flow control and logic tap should pass context to side effect function","status":"passed","title":"should pass context to side effect function","duration":0.8781209999999646,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","sleep"],"fullName":"Composition Utilities (utils.ts) Flow control and logic sleep should pause workflow for specified duration","status":"passed","title":"should pause workflow for specified duration","duration":107.94387300000005,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","sleep"],"fullName":"Composition Utilities (utils.ts) Flow control and logic sleep should respect abort signals","status":"passed","title":"should respect abort signals","duration":6.907058000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","tapError"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience tapError should perform side effects on error without catching it","status":"passed","title":"should perform side effects on error without catching it","duration":2.721604999999954,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","tapError"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience tapError should not perform side effect on success","status":"passed","title":"should not perform side effect on success","duration":0.7423919999999953,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","tapError"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience tapError should pass context to error handler","status":"passed","title":"should pass context to error handler","duration":3.877843999999982,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","attempt"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience attempt should convert exceptions to Result type","status":"passed","title":"should convert exceptions to Result type","duration":2.0693509999999833,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","attempt"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience attempt should wrap successful results in Ok","status":"passed","title":"should wrap successful results in Ok","duration":1.90945099999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should retry failed tasks","status":"passed","title":"should retry failed tasks","duration":33.49344299999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should fail after max attempts","status":"passed","title":"should fail after max attempts","duration":12.025446999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should use exponential backoff","status":"passed","title":"should use exponential backoff","duration":307.74056200000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should respect shouldRetry predicate","status":"passed","title":"should respect shouldRetry predicate","duration":35.35700700000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should not retry when shouldRetry returns false","status":"passed","title":"should not retry when shouldRetry returns false","duration":3.0634039999999914,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withName"],"fullName":"Composition Utilities (utils.ts) Task enhancers withName should attach name to task","status":"passed","title":"should attach name to task","duration":2.308270999999877,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withName"],"fullName":"Composition Utilities (utils.ts) Task enhancers withName should preserve task functionality","status":"passed","title":"should preserve task functionality","duration":0.4792010000001028,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","memoize"],"fullName":"Composition Utilities (utils.ts) Task enhancers memoize should cache results based on input","status":"passed","title":"should cache results based on input","duration":22.207223000000113,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","memoize"],"fullName":"Composition Utilities (utils.ts) Task enhancers memoize should use deep equality for cache keys","status":"passed","title":"should use deep equality for cache keys","duration":4.059573,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","once"],"fullName":"Composition Utilities (utils.ts) Task enhancers once should execute task only once","status":"passed","title":"should execute task only once","duration":2.822789999999941,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","once"],"fullName":"Composition Utilities (utils.ts) Task enhancers once should share the same promise across calls","status":"passed","title":"should share the same promise across calls","duration":101.3410879999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withTimeout"],"fullName":"Composition Utilities (utils.ts) Task enhancers withTimeout should timeout long-running tasks","status":"passed","title":"should timeout long-running tasks","duration":501.6732810000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withTimeout"],"fullName":"Composition Utilities (utils.ts) Task enhancers withTimeout should complete fast tasks normally","status":"passed","title":"should complete fast tasks normally","duration":101.062997,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withTimeout"],"fullName":"Composition Utilities (utils.ts) Task enhancers withTimeout should clean up timers on abort","status":"failed","title":"should clean up timers on abort","duration":37.61267399999974,"failureMessages":["AssertionError: expected [Function] to throw error including 'Aborted' but got 'Task failed: This operation was abort…'\n    at Assertion.<anonymous> (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+expect@2.1.8/node_modules/@vitest/expect/dist/index.js:1509:21)\n    at Assertion.<anonymous> (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+expect@2.1.8/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Assertion.methodWrapper (file:///home/patrick/Projects/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1618:25)\n    at file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+expect@2.1.8/node_modules/@vitest/expect/dist/index.js:1849:31\n    at /home/patrick/Projects/effectively/test/composition-utils.test.ts:954:9\n    at file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withState"],"fullName":"Composition Utilities (utils.ts) Task enhancers withState should manage stateful workflows and provide tools via context","status":"passed","title":"should manage stateful workflows and provide tools via context","duration":2.5907670000001417,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withState"],"fullName":"Composition Utilities (utils.ts) Task enhancers withState should initialize state with a static value","status":"passed","title":"should initialize state with a static value","duration":2.7308499999999185,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withState"],"fullName":"Composition Utilities (utils.ts) Task enhancers withState should throw if useState is used outside a withState context","status":"passed","title":"should throw if useState is used outside a withState context","duration":2.007042000000183,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withThrottle"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withThrottle should throttle task execution","status":"passed","title":"should throttle task execution","duration":154.59527799999978,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withThrottle"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withThrottle should respect abort signals in throttle queue","status":"failed","title":"should respect abort signals in throttle queue","duration":5005.234448,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:581:17)\n    at processTimers (node:internal/timers:519:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withPoll"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withPoll should poll until condition is met","status":"passed","title":"should poll until condition is met","duration":6.531006000000161,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withPoll"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withPoll should timeout if condition is never met","status":"failed","title":"should timeout if condition is never met","duration":5006.517888,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:581:17)\n    at processTimers (node:internal/timers:519:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","createBatchingTask"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching createBatchingTask should batch multiple calls","status":"passed","title":"should batch multiple calls","duration":4.118994000000384,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","createBatchingTask"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching createBatchingTask should handle batch function errors","status":"passed","title":"should handle batch function errors","duration":31.577131999998528,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","createBatchingTask"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching createBatchingTask should respect abort signals in batch queue","status":"failed","title":"should respect abort signals in batch queue","duration":7.504877999999735,"failureMessages":["AssertionError: expected error to be instance of DOMException\n    at file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+expect@2.1.8/node_modules/@vitest/expect/dist/index.js:1849:31"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withDebounce"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withDebounce should debounce rapid calls","status":"passed","title":"should debounce rapid calls","duration":1.2572790000012901,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withDebounce"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withDebounce should execute after debounce period","status":"passed","title":"should execute after debounce period","duration":1.0271220000013273,"failureMessages":[],"meta":{}}],"startTime":1750122938095,"endTime":1750122949792.027,"status":"failed","message":"","name":"/home/patrick/Projects/effectively/test/composition-utils.test.ts"},{"assertionResults":[{"ancestorTitles":["Core Execution Engine (run.ts)","createContext and basic execution"],"fullName":"Core Execution Engine (run.ts) createContext and basic execution should create a context and run a simple task","status":"passed","title":"should create a context and run a simple task","duration":16.637688000000026,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","createContext and basic execution"],"fullName":"Core Execution Engine (run.ts) createContext and basic execution should provide context to tasks","status":"passed","title":"should provide context to tasks","duration":3.4408679999999094,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","createContext and basic execution"],"fullName":"Core Execution Engine (run.ts) createContext and basic execution should handle context overrides","status":"passed","title":"should handle context overrides","duration":0.7044789999999921,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","createContext and basic execution"],"fullName":"Core Execution Engine (run.ts) createContext and basic execution should handle database operations through context","status":"passed","title":"should handle database operations through context","duration":3.809836000000132,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Error handling and Result types"],"fullName":"Core Execution Engine (run.ts) Error handling and Result types should throw errors by default","status":"passed","title":"should throw errors by default","duration":3.776258000000098,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Error handling and Result types"],"fullName":"Core Execution Engine (run.ts) Error handling and Result types should return Result when throw: false","status":"passed","title":"should return Result when throw: false","duration":2.315943000000061,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Error handling and Result types"],"fullName":"Core Execution Engine (run.ts) Error handling and Result types should handle successful tasks with throw: false","status":"passed","title":"should handle successful tasks with throw: false","duration":1.1284800000000814,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Backtracking and control flow"],"fullName":"Core Execution Engine (run.ts) Backtracking and control flow should handle BacktrackSignal correctly","status":"passed","title":"should handle BacktrackSignal correctly","duration":1.2640779999999268,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Backtracking and control flow"],"fullName":"Core Execution Engine (run.ts) Backtracking and control flow should identify BacktrackSignal with type guard","status":"passed","title":"should identify BacktrackSignal with type guard","duration":0.9049949999998717,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Backtracking and control flow"],"fullName":"Core Execution Engine (run.ts) Backtracking and control flow should prevent infinite backtracking loops","status":"passed","title":"should prevent infinite backtracking loops","duration":60.276284999999916,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context getters and safety"],"fullName":"Core Execution Engine (run.ts) Context getters and safety should throw ContextNotFoundError when getContext called outside run","status":"passed","title":"should throw ContextNotFoundError when getContext called outside run","duration":0.7166369999999915,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context getters and safety"],"fullName":"Core Execution Engine (run.ts) Context getters and safety should return error Result when getContextSafe called outside run","status":"passed","title":"should return error Result when getContextSafe called outside run","duration":0.6957249999998112,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context getters and safety"],"fullName":"Core Execution Engine (run.ts) Context getters and safety should return undefined when getContextOrUndefined called outside run","status":"passed","title":"should return undefined when getContextOrUndefined called outside run","duration":0.7793870000000425,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context getters and safety"],"fullName":"Core Execution Engine (run.ts) Context getters and safety should work correctly inside run","status":"passed","title":"should work correctly inside run","duration":0.9414860000001681,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Smart, Local, and Global context functions"],"fullName":"Core Execution Engine (run.ts) Smart, Local, and Global context functions should use global context as fallback for smart functions","status":"passed","title":"should use global context as fallback for smart functions","duration":2.1443850000000566,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Smart, Local, and Global context functions"],"fullName":"Core Execution Engine (run.ts) Smart, Local, and Global context functions should throw errors for local-only functions when no context","status":"passed","title":"should throw errors for local-only functions when no context","duration":2.9278560000000198,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Smart, Local, and Global context functions"],"fullName":"Core Execution Engine (run.ts) Smart, Local, and Global context functions should work with global-only functions","status":"passed","title":"should work with global-only functions","duration":1.7636600000000726,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","provide function and context overrides"],"fullName":"Core Execution Engine (run.ts) provide function and context overrides should temporarily override context values","status":"failed","title":"should temporarily override context values","duration":22.42293799999993,"failureMessages":["Error: Context is not available\n    at Object.use (file:///home/patrick/Projects/effectively/node_modules/.pnpm/unctx@2.4.1/node_modules/unctx/dist/index.mjs:31:15)\n    at provide (/home/patrick/Projects/effectively/src/run.ts:2327:53)\n    at /home/patrick/Projects/effectively/test/core-run.test.ts:328:33\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1262:5)"],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","provide function and context overrides"],"fullName":"Core Execution Engine (run.ts) provide function and context overrides should nest provide calls correctly","status":"failed","title":"should nest provide calls correctly","duration":10.68628200000012,"failureMessages":["AssertionError: expected { userId: 'test-user', counter: +0 } to deeply equal { userId: 'level1', counter: 42 }\n    at /home/patrick/Projects/effectively/test/core-run.test.ts:351:22\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1262:5)\n    at startTests (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1271:3)\n    at file:///home/patrick/Projects/effectively/node_modules/.pnpm/vitest@2.1.8_@types+node@22.10.2_jsdom@26.1.0/node_modules/vitest/dist/chunks/runBaseTests.3qpJUEJM.js:126:11"],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","provide function and context overrides"],"fullName":"Core Execution Engine (run.ts) provide function and context overrides should preserve scope in provide calls","status":"passed","title":"should preserve scope in provide calls","duration":1.5518480000000636,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context validation and merging"],"fullName":"Core Execution Engine (run.ts) Context validation and merging should validate context with schema","status":"passed","title":"should validate context with schema","duration":2.7721429999999145,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context validation and merging"],"fullName":"Core Execution Engine (run.ts) Context validation and merging should merge contexts correctly","status":"passed","title":"should merge contexts correctly","duration":3.5741319999999632,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context validation and merging"],"fullName":"Core Execution Engine (run.ts) Context validation and merging should require context properties","status":"passed","title":"should require context properties","duration":3.976038000000017,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Dependency injection"],"fullName":"Core Execution Engine (run.ts) Dependency injection should create and use injection tokens","status":"failed","title":"should create and use injection tokens","duration":0.9757600000000366,"failureMessages":["Error: Context is not available\n    at Object.use (file:///home/patrick/Projects/effectively/node_modules/.pnpm/unctx@2.4.1/node_modules/unctx/dist/index.mjs:31:15)\n    at provide (/home/patrick/Projects/effectively/src/run.ts:2327:53)\n    at /home/patrick/Projects/effectively/test/core-run.test.ts:456:28\n    at file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:146:14\n    at file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:533:11\n    at runWithTimeout (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:39:7)\n    at runTest (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1056:17)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)"],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Dependency injection"],"fullName":"Core Execution Engine (run.ts) Dependency injection should handle optional injection","status":"passed","title":"should handle optional injection","duration":0.8860790000001089,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Dependency injection"],"fullName":"Core Execution Engine (run.ts) Dependency injection should throw when required injection not found","status":"passed","title":"should throw when required injection not found","duration":3.269203999999945,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Cancellation and abort signals"],"fullName":"Core Execution Engine (run.ts) Cancellation and abort signals should propagate abort signals to context scope","status":"passed","title":"should propagate abort signals to context scope","duration":3.2485260000000835,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Cancellation and abort signals"],"fullName":"Core Execution Engine (run.ts) Cancellation and abort signals should handle abort during execution","status":"passed","title":"should handle abort during execution","duration":15.595704999999953,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Logging"],"fullName":"Core Execution Engine (run.ts) Logging should use provided logger","status":"failed","title":"should use provided logger","duration":8.320804999999837,"failureMessages":["AssertionError: expected \"spy\" to be called at least once\n    at Proxy.<anonymous> (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+expect@2.1.8/node_modules/@vitest/expect/dist/index.js:1448:13)\n    at Proxy.<anonymous> (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+expect@2.1.8/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///home/patrick/Projects/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1618:25)\n    at /home/patrick/Projects/effectively/test/core-run.test.ts:563:32\n    at file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///home/patrick/Projects/effectively/node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1262:5)"],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Logging"],"fullName":"Core Execution Engine (run.ts) Logging should handle errors with logger","status":"passed","title":"should handle errors with logger","duration":3.6300269999999273,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Edge cases and error scenarios"],"fullName":"Core Execution Engine (run.ts) Edge cases and error scenarios should handle null/undefined inputs gracefully","status":"passed","title":"should handle null/undefined inputs gracefully","duration":1.9447139999999763,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Edge cases and error scenarios"],"fullName":"Core Execution Engine (run.ts) Edge cases and error scenarios should handle deeply nested task execution","status":"passed","title":"should handle deeply nested task execution","duration":4.108714000000191,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Edge cases and error scenarios"],"fullName":"Core Execution Engine (run.ts) Edge cases and error scenarios should preserve context through complex async operations","status":"passed","title":"should preserve context through complex async operations","duration":12.677605999999969,"failureMessages":[],"meta":{}}],"startTime":1750122938601,"endTime":1750122938812.6775,"status":"failed","message":"","name":"/home/patrick/Projects/effectively/test/core-run.test.ts"},{"assertionResults":[{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should perform parallel map and sequential reduce","status":"passed","title":"should perform parallel map and sequential reduce","duration":30.997306999999978,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should handle empty arrays","status":"passed","title":"should handle empty arrays","duration":2.082629000000111,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should handle single element arrays","status":"passed","title":"should handle single element arrays","duration":5.593459000000053,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should work with complex data types","status":"passed","title":"should work with complex data types","duration":3.320457000000033,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should work with string concatenation","status":"passed","title":"should work with string concatenation","duration":2.6121070000000373,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should handle concurrency limits","status":"passed","title":"should handle concurrency limits","duration":74.99190399999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should handle task failures gracefully","status":"passed","title":"should handle task failures gracefully","duration":24.553483999999912,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should filter array based on async predicate","status":"passed","title":"should filter array based on async predicate","duration":22.432997,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should handle empty arrays","status":"passed","title":"should handle empty arrays","duration":3.8046540000000277,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should handle arrays where no items pass filter","status":"passed","title":"should handle arrays where no items pass filter","duration":4.3482589999999846,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should handle arrays where all items pass filter","status":"passed","title":"should handle arrays where all items pass filter","duration":2.5221760000000586,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should work with complex data types","status":"passed","title":"should work with complex data types","duration":8.782916999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should respect concurrency limits","status":"passed","title":"should respect concurrency limits","duration":66.51537399999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should handle predicate task failures","status":"passed","title":"should handle predicate task failures","duration":30.342720999999983,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should maintain original order of elements","status":"passed","title":"should maintain original order of elements","duration":14.294110000000046,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should group items by key generated from async task","status":"passed","title":"should group items by key generated from async task","duration":10.966714999999908,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle empty arrays","status":"passed","title":"should handle empty arrays","duration":0.827570000000037,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle arrays with single group","status":"passed","title":"should handle arrays with single group","duration":5.133330999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should work with complex data types","status":"passed","title":"should work with complex data types","duration":19.776070000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle numeric keys","status":"passed","title":"should handle numeric keys","duration":4.616577000000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should respect concurrency limits","status":"passed","title":"should respect concurrency limits","duration":37.08917999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle keying task failures","status":"passed","title":"should handle keying task failures","duration":4.828531000000112,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should maintain insertion order within groups","status":"passed","title":"should maintain insertion order within groups","duration":3.377028999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle duplicate keys correctly","status":"passed","title":"should handle duplicate keys correctly","duration":6.204975999999988,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","Integration tests"],"fullName":"Data Processing (data-processing.ts) Integration tests should combine mapReduce with filter for complex processing","status":"passed","title":"should combine mapReduce with filter for complex processing","duration":6.147523000000092,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","Integration tests"],"fullName":"Data Processing (data-processing.ts) Integration tests should use groupBy with mapReduce for aggregation","status":"passed","title":"should use groupBy with mapReduce for aggregation","duration":8.846854000000121,"failureMessages":[],"meta":{}}],"startTime":1750122938184,"endTime":1750122938596.847,"status":"passed","message":"","name":"/home/patrick/Projects/effectively/test/data-processing.test.ts"},{"assertionResults":[{"ancestorTitles":["Debug Provide"],"fullName":"Debug Provide should work with context-specific provide","status":"passed","title":"should work with context-specific provide","duration":8.387464999999906,"failureMessages":[],"meta":{}},{"ancestorTitles":["Debug Provide"],"fullName":"Debug Provide should work with global provide","status":"passed","title":"should work with global provide","duration":2.26916099999994,"failureMessages":[],"meta":{}}],"startTime":1750122938769,"endTime":1750122938780.269,"status":"passed","message":"","name":"/home/patrick/Projects/effectively/test/debug-provide.test.ts"},{"assertionResults":[{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should execute simple do block with tasks","status":"passed","title":"should execute simple do block with tasks","duration":5.020263,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle input values","status":"passed","title":"should handle input values","duration":0.8219930000000204,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle plain values with pure","status":"passed","title":"should handle plain values with pure","duration":0.8140200000000277,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle Promise values","status":"passed","title":"should handle Promise values","duration":0.769038999999907,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle Result types - success case","status":"passed","title":"should handle Result types - success case","duration":0.820220000000063,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle Result types - error case","status":"passed","title":"should handle Result types - error case","duration":2.914305000000013,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should propagate errors from tasks","status":"passed","title":"should propagate errors from tasks","duration":1.0475000000000136,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle try/catch in generators","status":"passed","title":"should handle try/catch in generators","duration":0.7470579999999245,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","context-specific doTask"],"fullName":"Do Notation context-specific doTask should work with typed context","status":"passed","title":"should work with typed context","duration":1.428547999999978,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","context-specific doTask"],"fullName":"Do Notation context-specific doTask should work with doBlock for no-input workflows","status":"passed","title":"should work with doBlock for no-input workflows","duration":0.8390630000000101,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","conditional functions"],"fullName":"Do Notation conditional functions should execute doWhen with true condition","status":"passed","title":"should execute doWhen with true condition","duration":0.6006810000000087,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","conditional functions"],"fullName":"Do Notation conditional functions should execute doWhen with false condition","status":"passed","title":"should execute doWhen with false condition","duration":0.553745000000049,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","conditional functions"],"fullName":"Do Notation conditional functions should execute doUnless with false condition","status":"passed","title":"should execute doUnless with false condition","duration":0.7033200000000761,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","conditional functions"],"fullName":"Do Notation conditional functions should skip doUnless with true condition","status":"passed","title":"should skip doUnless with true condition","duration":0.4586770000000797,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","sequence function"],"fullName":"Do Notation sequence function should execute tasks in sequence and collect results","status":"passed","title":"should execute tasks in sequence and collect results","duration":1.454074999999989,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","sequence function"],"fullName":"Do Notation sequence function should handle empty sequence","status":"passed","title":"should handle empty sequence","duration":0.7799289999999246,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","forEach function"],"fullName":"Do Notation forEach function should iterate over items and execute generator for each","status":"passed","title":"should iterate over items and execute generator for each","duration":0.7744010000000117,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","forEach function"],"fullName":"Do Notation forEach function should handle empty array","status":"passed","title":"should handle empty array","duration":1.71731699999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","integration tests"],"fullName":"Do Notation integration tests should handle complex workflow with multiple patterns","status":"passed","title":"should handle complex workflow with multiple patterns","duration":1.20159799999999,"failureMessages":[],"meta":{}}],"startTime":1750122938066,"endTime":1750122938092.2017,"status":"passed","message":"","name":"/home/patrick/Projects/effectively/test/do-notation.test.ts"},{"assertionResults":[{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should create a basic custom error type","status":"passed","title":"should create a basic custom error type","duration":2.8037180000000035,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should create hierarchical error types","status":"passed","title":"should create hierarchical error types","duration":0.9854310000000623,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should create multi-level inheritance hierarchies","status":"passed","title":"should create multi-level inheritance hierarchies","duration":0.8758370000000468,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should handle custom constructor parameters","status":"passed","title":"should handle custom constructor parameters","duration":0.5307179999999789,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should maintain proper stack traces","status":"passed","title":"should maintain proper stack traces","duration":8.032967999999983,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should set constructor name properly","status":"passed","title":"should set constructor name properly","duration":0.3623300000000427,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should handle errors with no message","status":"passed","title":"should handle errors with no message","duration":0.4517529999999397,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorHandler"],"fullName":"Error Handling (errors.ts) createErrorHandler should create a typed error handler tuple","status":"passed","title":"should create a typed error handler tuple","duration":1.501119000000017,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorHandler"],"fullName":"Error Handling (errors.ts) createErrorHandler should provide correct error typing in handler","status":"passed","title":"should provide correct error typing in handler","duration":0.6905450000000428,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorHandler"],"fullName":"Error Handling (errors.ts) createErrorHandler should work with async handlers","status":"passed","title":"should work with async handlers","duration":11.967345000000023,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should catch and handle specific errors","status":"passed","title":"should catch and handle specific errors","duration":11.497789000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should handle hierarchical errors correctly","status":"passed","title":"should handle hierarchical errors correctly","duration":3.4651000000000067,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should match handlers in order","status":"passed","title":"should match handlers in order","duration":3.0255900000000793,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should not catch BacktrackSignal errors","status":"passed","title":"should not catch BacktrackSignal errors","duration":1.058467999999948,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should rethrow unhandled errors","status":"passed","title":"should rethrow unhandled errors","duration":5.114491999999927,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should pass context to error handlers","status":"passed","title":"should pass context to error handlers","duration":1.375671999999895,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should handle async error handlers","status":"passed","title":"should handle async error handlers","duration":14.419688000000065,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should work with successful tasks","status":"passed","title":"should work with successful tasks","duration":1.7393499999999449,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should handle non-Error thrown values","status":"passed","title":"should handle non-Error thrown values","duration":3.7521980000000212,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should handle multiple error types in complex workflows","status":"passed","title":"should handle multiple error types in complex workflows","duration":6.235279999999989,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should convert successful sync functions to Ok results","status":"passed","title":"should convert successful sync functions to Ok results","duration":0.7663159999999607,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should convert successful async functions to Ok results","status":"passed","title":"should convert successful async functions to Ok results","duration":10.998312000000055,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should convert thrown errors to Err results","status":"passed","title":"should convert thrown errors to Err results","duration":0.7664449999999761,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should convert async thrown errors to Err results","status":"passed","title":"should convert async thrown errors to Err results","duration":14.997508000000039,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should handle non-Error thrown values","status":"passed","title":"should handle non-Error thrown values","duration":2.4381650000000263,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should preserve function arguments","status":"passed","title":"should preserve function arguments","duration":1.26070100000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should work with functions that return undefined","status":"passed","title":"should work with functions that return undefined","duration":0.5804429999999456,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should work with functions that return null","status":"passed","title":"should work with functions that return null","duration":0.5428170000000136,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should handle custom error types","status":"passed","title":"should handle custom error types","duration":2.0506470000000263,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should work with API-like functions","status":"passed","title":"should work with API-like functions","duration":1.9901899999999841,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","Integration with task workflows"],"fullName":"Error Handling (errors.ts) Integration with task workflows should integrate error boundaries with complex workflows","status":"passed","title":"should integrate error boundaries with complex workflows","duration":4.474924999999985,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","Integration with task workflows"],"fullName":"Error Handling (errors.ts) Integration with task workflows should combine tryCatch with task workflows","status":"passed","title":"should combine tryCatch with task workflows","duration":1.8446309999999357,"failureMessages":[],"meta":{}}],"startTime":1750122938069,"endTime":1750122938198.8447,"status":"passed","message":"","name":"/home/patrick/Projects/effectively/test/error-handling.test.ts"},{"assertionResults":[{"ancestorTitles":["Global Provide Function Fix"],"fullName":"Global Provide Function Fix should properly enhance context when provide is called within existing context","status":"passed","title":"should properly enhance context when provide is called within existing context","duration":12.698304000000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Global Provide Function Fix"],"fullName":"Global Provide Function Fix should work with nested provide calls","status":"passed","title":"should work with nested provide calls","duration":7.787678999999912,"failureMessages":[],"meta":{}}],"startTime":1750122938731,"endTime":1750122938751.7876,"status":"passed","message":"","name":"/home/patrick/Projects/effectively/test/global-provide-fix.test.ts"},{"assertionResults":[{"ancestorTitles":["Resource Management (bracket.ts)","withResource (bracket)"],"fullName":"Resource Management (bracket.ts) withResource (bracket) should acquire, use, and release resources correctly","status":"passed","title":"should acquire, use, and release resources correctly","duration":6.505591999999979,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResource (bracket)"],"fullName":"Resource Management (bracket.ts) withResource (bracket) should release resources even when use task throws","status":"passed","title":"should release resources even when use task throws","duration":3.991845000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResource (bracket)"],"fullName":"Resource Management (bracket.ts) withResource (bracket) should handle errors in acquire phase","status":"passed","title":"should handle errors in acquire phase","duration":1.157214999999951,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResource (bracket)"],"fullName":"Resource Management (bracket.ts) withResource (bracket) should handle errors in release phase","status":"passed","title":"should handle errors in release phase","duration":1.030183999999963,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResource (bracket)"],"fullName":"Resource Management (bracket.ts) withResource (bracket) should handle errors in both use and release phases","status":"passed","title":"should handle errors in both use and release phases","duration":0.9415130000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResource (bracket)"],"fullName":"Resource Management (bracket.ts) withResource (bracket) should work with complex resource merging","status":"passed","title":"should work with complex resource merging","duration":0.7895479999999679,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Disposable and helper functions"],"fullName":"Resource Management (bracket.ts) Disposable and helper functions isDisposable and isAsyncDisposable should work correctly","status":"passed","title":"isDisposable and isAsyncDisposable should work correctly","duration":0.49027300000000196,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Disposable and helper functions"],"fullName":"Resource Management (bracket.ts) Disposable and helper functions asAsyncDisposable should adapt an object with a cleanup method","status":"passed","title":"asAsyncDisposable should adapt an object with a cleanup method","duration":0.9274639999999863,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Disposable and helper functions"],"fullName":"Resource Management (bracket.ts) Disposable and helper functions createResource should create a valid resource definition","status":"passed","title":"createResource should create a valid resource definition","duration":1.0436130000000503,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withDisposableResource"],"fullName":"Resource Management (bracket.ts) withDisposableResource should work with synchronous disposable resources","status":"passed","title":"should work with synchronous disposable resources","duration":1.2128109999999879,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withDisposableResource"],"fullName":"Resource Management (bracket.ts) withDisposableResource should work with asynchronous disposable resources","status":"passed","title":"should work with asynchronous disposable resources","duration":1.041606999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withDisposableResource"],"fullName":"Resource Management (bracket.ts) withDisposableResource should dispose resources even when use task fails","status":"passed","title":"should dispose resources even when use task fails","duration":1.281804999999963,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResources (bracketMany)"],"fullName":"Resource Management (bracket.ts) withResources (bracketMany) should manage multiple resources correctly","status":"passed","title":"should manage multiple resources correctly","duration":2.8940410000000156,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","withResources (bracketMany)"],"fullName":"Resource Management (bracket.ts) withResources (bracketMany) should release acquired resources if a later acquisition fails","status":"passed","title":"should release acquired resources if a later acquisition fails","duration":1.5059230000000525,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","DatabaseConnection example class"],"fullName":"Resource Management (bracket.ts) DatabaseConnection example class should be constructable and disposable","status":"passed","title":"should be constructable and disposable","duration":4.91938499999992,"failureMessages":[],"meta":{}}],"startTime":1750122938070,"endTime":1750122938100.9194,"status":"passed","message":"","name":"/home/patrick/Projects/effectively/test/resource-management.test.ts"},{"assertionResults":[{"ancestorTitles":["Simple Bracket Test"],"fullName":"Simple Bracket Test should work with manual bracket pattern","status":"passed","title":"should work with manual bracket pattern","duration":12.164397000000008,"failureMessages":[],"meta":{}}],"startTime":1750122938783,"endTime":1750122938795.1643,"status":"passed","message":"","name":"/home/patrick/Projects/effectively/test/simple-bracket.test.ts"},{"assertionResults":[{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should execute tasks in parallel and return keyed results","status":"passed","title":"should execute tasks in parallel and return keyed results","duration":8.350065000000086,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should handle empty task object","status":"passed","title":"should handle empty task object","duration":0.6909610000000157,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should handle single task","status":"passed","title":"should handle single task","duration":1.2314800000000332,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should pass the same input to all tasks","status":"passed","title":"should pass the same input to all tasks","duration":1.2332340000000386,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should handle task failures correctly","status":"passed","title":"should handle task failures correctly","duration":3.1987460000000283,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should maintain type safety","status":"passed","title":"should maintain type safety","duration":1.7538829999999734,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should respect context overrides","status":"passed","title":"should respect context overrides","duration":1.1916780000000244,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should execute onTrue task when predicate is true","status":"passed","title":"should execute onTrue task when predicate is true","duration":1.5252729999999701,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should execute onFalse task when predicate is false","status":"passed","title":"should execute onFalse task when predicate is false","duration":1.870600999999965,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should work with async predicates","status":"passed","title":"should work with async predicates","duration":2.4000200000000405,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should pass context to predicate","status":"passed","title":"should pass context to predicate","duration":2.7971630000000687,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should handle errors in predicate","status":"passed","title":"should handle errors in predicate","duration":4.800468999999907,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should handle errors in branch tasks","status":"passed","title":"should handle errors in branch tasks","duration":3.9200870000000805,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should support different return types from branches","status":"passed","title":"should support different return types from branches","duration":4.594673999999941,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should work with complex conditional logic","status":"passed","title":"should work with complex conditional logic","duration":2.6052929999999606,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should execute tasks in parallel and return typed tuple","status":"passed","title":"should execute tasks in parallel and return typed tuple","duration":1.2333770000000186,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should handle empty array","status":"passed","title":"should handle empty array","duration":5.2043879999999945,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should handle single task","status":"passed","title":"should handle single task","duration":1.0984090000000606,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should execute tasks in parallel","status":"passed","title":"should execute tasks in parallel","duration":2.6263210000000754,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should handle task failures","status":"passed","title":"should handle task failures","duration":1.3707350000000815,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should maintain order of results","status":"passed","title":"should maintain order of results","duration":0.8674200000000383,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should pass same input to all tasks","status":"passed","title":"should pass same input to all tasks","duration":0.8574039999999741,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","Integration tests"],"fullName":"Structured Concurrency (structured-concurrency.ts) Integration tests should combine forkJoin and ift for complex workflows","status":"passed","title":"should combine forkJoin and ift for complex workflows","duration":4.654905999999983,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","Integration tests"],"fullName":"Structured Concurrency (structured-concurrency.ts) Integration tests should handle nested forkJoin operations","status":"passed","title":"should handle nested forkJoin operations","duration":3.190947000000051,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","Integration tests"],"fullName":"Structured Concurrency (structured-concurrency.ts) Integration tests should handle complex predicate logic in ift","status":"passed","title":"should handle complex predicate logic in ift","duration":4.975931999999943,"failureMessages":[],"meta":{}}],"startTime":1750122938073,"endTime":1750122938145.9758,"status":"passed","message":"","name":"/home/patrick/Projects/effectively/test/structured-concurrency.test.ts"},{"assertionResults":[{"ancestorTitles":["Telemetry (telemetry.ts)","withSpan"],"fullName":"Telemetry (telemetry.ts) withSpan should create a span, set status OK on success, and return task result","status":"passed","title":"should create a span, set status OK on success, and return task result","duration":15.047357999999917,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","withSpan"],"fullName":"Telemetry (telemetry.ts) withSpan should create a span, record exception, set status ERROR on failure, and re-throw","status":"passed","title":"should create a span, record exception, set status ERROR on failure, and re-throw","duration":3.2380909999999403,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","withSpan"],"fullName":"Telemetry (telemetry.ts) withSpan should fall back to logging when no tracer is available","status":"passed","title":"should fall back to logging when no tracer is available","duration":5.370052999999984,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","recordMetric"],"fullName":"Telemetry (telemetry.ts) recordMetric should record a counter metric","status":"passed","title":"should record a counter metric","duration":3.1801890000000412,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","recordMetric"],"fullName":"Telemetry (telemetry.ts) recordMetric should record a histogram metric","status":"passed","title":"should record a histogram metric","duration":6.474663999999962,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","recordMetric"],"fullName":"Telemetry (telemetry.ts) recordMetric should fall back to logging when no meter is available","status":"passed","title":"should fall back to logging when no meter is available","duration":3.298059999999964,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","Higher-Level Enhancers"],"fullName":"Telemetry (telemetry.ts) Higher-Level Enhancers withTiming should record a histogram on success and failure","status":"passed","title":"withTiming should record a histogram on success and failure","duration":2.746715999999992,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","Higher-Level Enhancers"],"fullName":"Telemetry (telemetry.ts) Higher-Level Enhancers withCounter should increment on success and failure","status":"passed","title":"withCounter should increment on success and failure","duration":3.8749480000000176,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","Higher-Level Enhancers"],"fullName":"Telemetry (telemetry.ts) Higher-Level Enhancers withObservability should call span, timer, and counter logic","status":"passed","title":"withObservability should call span, timer, and counter logic","duration":2.325305999999955,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","Manual Span Helpers"],"fullName":"Telemetry (telemetry.ts) Manual Span Helpers addSpanAttributes should call setAttributes on the active span","status":"passed","title":"addSpanAttributes should call setAttributes on the active span","duration":1.521113000000014,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","Manual Span Helpers"],"fullName":"Telemetry (telemetry.ts) Manual Span Helpers recordSpanException should call recordException on the active span","status":"passed","title":"recordSpanException should call recordException on the active span","duration":5.167589000000021,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","Manual Span Helpers"],"fullName":"Telemetry (telemetry.ts) Manual Span Helpers getCurrentSpan should return the active span","status":"passed","title":"getCurrentSpan should return the active span","duration":1.7321860000000697,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","@traced Decorator"],"fullName":"Telemetry (telemetry.ts) @traced Decorator should wrap a class method with a span","status":"passed","title":"should wrap a class method with a span","duration":8.895920000000046,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","@traced Decorator"],"fullName":"Telemetry (telemetry.ts) @traced Decorator should use class.method as default span name","status":"passed","title":"should use class.method as default span name","duration":3.511837000000014,"failureMessages":[],"meta":{}},{"ancestorTitles":["Telemetry (telemetry.ts)","@traced Decorator"],"fullName":"Telemetry (telemetry.ts) @traced Decorator should not wrap if no tracer is present in context","status":"passed","title":"should not wrap if no tracer is present in context","duration":2.19500400000004,"failureMessages":[],"meta":{}}],"startTime":1750122938147,"endTime":1750122938221.195,"status":"passed","message":"","name":"/home/patrick/Projects/effectively/test/telemetry.test.ts"}]}
vitest --run --reporter=default --reporter=json --outputFile=./test-results.json


RUN  v2.1.8 /home/patrick/Projects/effectively

stdout | test/resource-management.test.ts > Resource Management (bracket.ts) > DatabaseConnection example class > should be constructable and disposable
Connecting to test-db...

stderr | test/data-processing.test.ts > Data Processing (data-processing.ts) > filter > should handle predicate task failures
[filter] Predicate for item at index 2 (value: 3) rejected with reason: Error: Predicate failed for number 3
   at /home/patrick/Projects/effectively/test/data-processing.test.ts:281:17
   at anonymousTask (/home/patrick/Projects/effectively/src/run.ts:573:28)
   at filterItemPredicate(anonymousTask)_idx2 (/home/patrick/Projects/effectively/src/data-processing.ts:147:91)
   at scheduler.postTask.priority.priority (/home/patrick/Projects/effectively/src/scheduler.ts:307:52)
   at Timeout.taskFn [as _onTimeout] (/home/patrick/Projects/effectively/src/scheduler.ts:151:25)
   at listOnTimeout (node:internal/timers:581:17)
   at processTimers (node:internal/timers:519:7)

stdout | test/debug-provide.test.ts > Debug Provide > should work with context-specific provide
Logs: [
 'before provide',
 'inside provide',
 'db available: true',
 'cache available: true',
 'after provide'
]

stdout | test/debug-provide.test.ts > Debug Provide > should work with global provide
Global Logs: [
 'before global provide',
 'inside global provide',
 'db available: true',
 'cache available: true',
 'after global provide'
]

      ❯ withPoll (2) 5014ms
        ✓ should poll until condition is met
        × should timeout if condition is never met 5007ms
      ❯ createBatchingTask (3)
✓ test/async-generator-tasks.test.ts (6)
✓ test/bracket-provide-integration.test.ts (2)
❯ test/circuit-breaker.test.ts (21) 10104ms
  ❯ Circuit Breaker (circuit-breaker.ts) (21) 10102ms
    ✓ CircuitOpenError (2)
    ❯ withCircuitBreaker (19) 10096ms
      ✓ CLOSED state behavior (3)
      ❯ OPEN state behavior (2) 5014ms
        ✓ should trip to OPEN state after reaching failure threshold
        × should fail fast with CircuitOpenError when circuit is open 5010ms
      ✓ HALF-OPEN state behavior (3)
      ✓ Configuration options (4)
      ✓ Multiple circuit instances (1)
      ✓ Context integration (2)
      ❯ Edge cases and error scenarios (3) 5006ms
        ✓ should handle undefined and null values correctly as input
        × should handle rapid successive calls correctly (trial request) 5002ms
        ✓ should maintain state across different run calls if ID is the same
      ✓ Recovery scenarios (1)
❯ test/composition-utils.test.ts (74) 11699ms
  ❯ Composition Utilities (utils.ts) (74) 11698ms
    ✓ Core composition functions (8)
    ✓ Workflow creation (11)
    ✓ Pipeable operators (7)
    ✓ Direct composition helpers (3)
    ✓ Flow control and logic (14)
    ✓ Error handling and resilience (10) 405ms
    ❯ Task enhancers (12) 783ms
      ✓ withName (2)
      ✓ memoize (2)
      ✓ once (2)
      ❯ withTimeout (3) 641ms
        ✓ should timeout long-running tasks 502ms
        ✓ should complete fast tasks normally
        × should clean up timers on abort
      ✓ withState (3)
    ❯ Advanced scheduling and batching (9) 10220ms
      ❯ withThrottle (2) 5160ms
        ✓ should throttle task execution
        × should respect abort signals in throttle queue 5005ms
      ❯ withPoll (2) 5014ms
        ✓ should poll until condition is met
        × should timeout if condition is never met 5007ms
      ❯ createBatchingTask (3)
        ✓ should batch multiple calls
        ✓ should handle batch function errors
        × should respect abort signals in batch queue
      ✓ withDebounce (2)
❯ test/core-run.test.ts (33)
  ❯ Core Execution Engine (run.ts) (33)
    ✓ createContext and basic execution (4)
    ✓ Error handling and Result types (3)
    ✓ Backtracking and control flow (3)
    ✓ Context getters and safety (4)
    ✓ Smart, Local, and Global context functions (3)
    ❯ provide function and context overrides (3)
      × should temporarily override context values
      × should nest provide calls correctly
      ✓ should preserve scope in provide calls
    ✓ Context validation and merging (3)
    ❯ Dependency injection (3)
      × should create and use injection tokens
      ✓ should handle optional injection
      ✓ should throw when required injection not found
    ✓ Cancellation and abort signals (2)
    ❯ Logging (2)
      × should use provided logger
      ✓ should handle errors with logger
    ✓ Edge cases and error scenarios (3)
✓ test/data-processing.test.ts (26) 417ms
✓ test/debug-provide.test.ts (2)
✓ test/do-notation.test.ts (19)
✓ test/error-handling.test.ts (32)
✓ test/global-provide-fix.test.ts (2)
✓ test/resource-management.test.ts (15)
✓ test/simple-bracket.test.ts (1)
✓ test/structured-concurrency.test.ts (25)
✓ test/telemetry.test.ts (15)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Failed Tests 10 ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

FAIL  test/circuit-breaker.test.ts > Circuit Breaker (circuit-breaker.ts) > withCircuitBreaker > OPEN state behavior > should fail fast with CircuitOpenError when circuit is open
FAIL  test/circuit-breaker.test.ts > Circuit Breaker (circuit-breaker.ts) > withCircuitBreaker > Edge cases and error scenarios > should handle rapid successive calls correctly (trial request)
FAIL  test/composition-utils.test.ts > Composition Utilities (utils.ts) > Advanced scheduling and batching > withThrottle > should respect abort signals in throttle queue
FAIL  test/composition-utils.test.ts > Composition Utilities (utils.ts) > Advanced scheduling and batching > withPoll > should timeout if condition is never met
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/10]⎯

FAIL  test/composition-utils.test.ts > Composition Utilities (utils.ts) > Task enhancers > withTimeout > should clean up timers on abort
AssertionError: expected [Function] to throw error including 'Aborted' but got 'Task failed: This operation was abort…'

Expected: "Aborted"
Received: "Task failed: This operation was aborted"

❯ test/composition-utils.test.ts:954:9
   952|         // await vi.advanceTimersByTimeAsync(10);
   953| 
   954|         await expect(promise).rejects.toThrow("Aborted");
      |         ^
   955|       });
   956|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/10]⎯

FAIL  test/composition-utils.test.ts > Composition Utilities (utils.ts) > Advanced scheduling and batching > createBatchingTask > should respect abort signals in batch queue
AssertionError: expected error to be instance of DOMException

- Expected: 
[Function DOMException]

+ Received: 
[WorkflowError: Task failed: This operation was aborted]

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/10]⎯

FAIL  test/core-run.test.ts > Core Execution Engine (run.ts) > provide function and context overrides > should temporarily override context values
Error: Context is not available
❯ Object.use node_modules/.pnpm/unctx@2.4.1/node_modules/unctx/dist/index.mjs:31:15
❯ provide src/run.ts:2327:53
   2325|     options?: ProvideImplOptions,
   2326|   ): Promise<Pr> {
   2327|     const parentDataForProvide = localUnctxInstance.use();
      |                                                     ^
   2328| 
   2329|     const baseContextForThisProvide = parentDataForProvide
❯ test/core-run.test.ts:328:33

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/10]⎯

FAIL  test/core-run.test.ts > Core Execution Engine (run.ts) > provide function and context overrides > should nest provide calls correctly
AssertionError: expected { userId: 'test-user', counter: +0 } to deeply equal { userId: 'level1', counter: 42 }

- Expected
+ Received

 Object {
-   "counter": 42,
-   "userId": "level1",
+   "counter": 0,
+   "userId": "test-user",
 }

❯ test/core-run.test.ts:351:22
   349|         });
   350|       }, undefined);
   351|       expect(result).toEqual({ userId: "level1", counter: 42 });
      |                      ^
   352|     });
   353| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/10]⎯

FAIL  test/core-run.test.ts > Core Execution Engine (run.ts) > Dependency injection > should create and use injection tokens
Error: Context is not available
❯ Object.use node_modules/.pnpm/unctx@2.4.1/node_modules/unctx/dist/index.mjs:31:15
❯ provide src/run.ts:2327:53
   2325|     options?: ProvideImplOptions,
   2326|   ): Promise<Pr> {
   2327|     const parentDataForProvide = localUnctxInstance.use();
      |                                                     ^
   2328| 
   2329|     const baseContextForThisProvide = parentDataForProvide
❯ test/core-run.test.ts:456:28

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/10]⎯

FAIL  test/core-run.test.ts > Core Execution Engine (run.ts) > Logging > should use provided logger
AssertionError: expected "spy" to be called at least once
❯ test/core-run.test.ts:563:32
   561|       await run(simpleTask, "test", { logger: mockLogger });
   562| 
   563|       expect(mockLogger.debug).toHaveBeenCalled();
      |                                ^
   564|     });
   565| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/10]⎯

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Unhandled Errors ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

Vitest caught 3 unhandled errors during the test run.
This might cause false positive tests. Resolve unhandled errors to make sure your tests are not affected.

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Unhandled Rejection ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
WorkflowError: Task failed: Batch failed
❯ runImpl src/run.ts:951:15
   949|         }
   950| 
   951|         throw new WorkflowError(
      |               ^
   952|           `Task failed: ${error instanceof Error ? error.message : String(error)}`,
   953|           error,

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { taskName: 'createBatchingTask(batchFn)', taskIndex: +0 }
This error originated in "test/composition-utils.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should handle batch function errors". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.
Caused by: Error: Batch failed
❯ batchFn test/composition-utils.test.ts:1130:17
❯ dispatch src/utils.ts:2370:5
❯ callTimer node_modules/.pnpm/vitest@2.1.8_@types+node@22.10.2_jsdom@26.1.0/node_modules/vitest/dist/chunks/vi.DgezovHB.js:2300:25
❯ doTickInner node_modules/.pnpm/vitest@2.1.8_@types+node@22.10.2_jsdom@26.1.0/node_modules/vitest/dist/chunks/vi.DgezovHB.js:2886:30
❯ doTick node_modules/.pnpm/vitest@2.1.8_@types+node@22.10.2_jsdom@26.1.0/node_modules/vitest/dist/chunks/vi.DgezovHB.js:2967:21
❯ Immediate.<anonymous> node_modules/.pnpm/vitest@2.1.8_@types+node@22.10.2_jsdom@26.1.0/node_modules/vitest/dist/chunks/vi.DgezovHB.js:2987:30
❯ processImmediate node:internal/timers:483:21
❯ process.callbackTrampoline node:internal/async_hooks:130:17


⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Unhandled Rejection ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
WorkflowError: Task failed: Batch failed
❯ runImpl src/run.ts:951:15
   949|         }
   950| 
   951|         throw new WorkflowError(
      |               ^
   952|           `Task failed: ${error instanceof Error ? error.message : String(error)}`,
   953|           error,

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { taskName: 'createBatchingTask(batchFn)', taskIndex: +0 }
This error originated in "test/composition-utils.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should handle batch function errors". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.
Caused by: Error: Batch failed
❯ batchFn test/composition-utils.test.ts:1130:17
❯ dispatch src/utils.ts:2370:5
❯ callTimer node_modules/.pnpm/vitest@2.1.8_@types+node@22.10.2_jsdom@26.1.0/node_modules/vitest/dist/chunks/vi.DgezovHB.js:2300:25
❯ doTickInner node_modules/.pnpm/vitest@2.1.8_@types+node@22.10.2_jsdom@26.1.0/node_modules/vitest/dist/chunks/vi.DgezovHB.js:2886:30
❯ doTick node_modules/.pnpm/vitest@2.1.8_@types+node@22.10.2_jsdom@26.1.0/node_modules/vitest/dist/chunks/vi.DgezovHB.js:2967:21
❯ Immediate.<anonymous> node_modules/.pnpm/vitest@2.1.8_@types+node@22.10.2_jsdom@26.1.0/node_modules/vitest/dist/chunks/vi.DgezovHB.js:2987:30
❯ processImmediate node:internal/timers:483:21
❯ process.callbackTrampoline node:internal/async_hooks:130:17


⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Unhandled Rejection ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
WorkflowError: Task failed: This operation was aborted
❯ runImpl src/run.ts:951:15
   949|         }
   950| 
   951|         throw new WorkflowError(
      |               ^
   952|           `Task failed: ${error instanceof Error ? error.message : String(error)}`,
   953|           error,

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { taskName: 'createBatchingTask(batchFn)', taskIndex: +0 }
This error originated in "test/composition-utils.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should respect abort signals in batch queue". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.
Caused by: AbortError: This operation was aborted
❯ new DOMException node:internal/per_context/domexception:53:5
❯ AbortController.abort node:internal/abort_controller:391:18
❯ test/composition-utils.test.ts:1156:20
❯ node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:146:14
❯ node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:533:11
❯ runWithTimeout node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:39:7
❯ runTest node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1056:17
❯ runSuite node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15
❯ runSuite node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15
❯ runSuite node_modules/.pnpm/@vitest+runner@2.1.8/node_modules/@vitest/runner/dist/index.js:1205:15

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { code: 20, INDEX_SIZE_ERR: 1, DOMSTRING_SIZE_ERR: 2, HIERARCHY_REQUEST_ERR: 3, WRONG_DOCUMENT_ERR: 4, INVALID_CHARACTER_ERR: 5, NO_DATA_ALLOWED_ERR: 6, NO_MODIFICATION_ALLOWED_ERR: 7, NOT_FOUND_ERR: 8, NOT_SUPPORTED_ERR: 9, INUSE_ATTRIBUTE_ERR: 10, INVALID_STATE_ERR: 11, SYNTAX_ERR: 12, INVALID_MODIFICATION_ERR: 13, NAMESPACE_ERR: 14, INVALID_ACCESS_ERR: 15, VALIDATION_ERR: 16, TYPE_MISMATCH_ERR: 17, SECURITY_ERR: 18, NETWORK_ERR: 19, ABORT_ERR: 20, URL_MISMATCH_ERR: 21, QUOTA_EXCEEDED_ERR: 22, TIMEOUT_ERR: 23, INVALID_NODE_TYPE_ERR: 24, DATA_CLONE_ERR: 25 }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

Test Files  3 failed | 11 passed (14)
     Tests  10 failed | 263 passed (273)
    Errors  3 errors
  Start at  21:15:37
  Duration  12.36s (transform 1.89s, setup 328ms, collect 4.30s, tests 22.87s, environment 4ms, prepare 1.86s)

JSON report written to /home/patrick/Projects/effectively/test-results.json
 ELIFECYCLE  Test failed. See above for more details.