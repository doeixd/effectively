{"numTotalTestSuites":110,"numPassedTestSuites":78,"numFailedTestSuites":32,"numPendingTestSuites":0,"numTotalTests":262,"numPassedTests":229,"numFailedTests":32,"numPendingTests":1,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1749748956163,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["Bracket and Provide Integration"],"fullName":"Bracket and Provide Integration should properly provide resources from bracket to use tasks","status":"passed","title":"should properly provide resources from bracket to use tasks","duration":4.028400000000033,"failureMessages":[],"meta":{}},{"ancestorTitles":["Bracket and Provide Integration"],"fullName":"Bracket and Provide Integration should handle nested bracket provides correctly","status":"passed","title":"should handle nested bracket provides correctly","duration":1.2158000000000015,"failureMessages":[],"meta":{}}],"startTime":1749748957930,"endTime":1749748957936.2158,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/bracket-provide-integration.test.ts"},{"assertionResults":[{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","CircuitOpenError"],"fullName":"Circuit Breaker (circuit-breaker.ts) CircuitOpenError should create proper error with circuit ID","status":"passed","title":"should create proper error with circuit ID","duration":3.675399999999968,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","CircuitOpenError"],"fullName":"Circuit Breaker (circuit-breaker.ts) CircuitOpenError should have proper prototype chain","status":"passed","title":"should have proper prototype chain","duration":0.6904999999999291,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","CLOSED state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker CLOSED state behavior should allow requests to pass through when circuit is closed","status":"passed","title":"should allow requests to pass through when circuit is closed","duration":2.6107999999999265,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","CLOSED state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker CLOSED state behavior should record failures but allow requests until threshold is reached","status":"failed","title":"should record failures but allow requests until threshold is reached","duration":31.73630000000003,"failureMessages":["AssertionError: expected \"spy\" to be called with arguments: [ …(2) ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st spy call:\n\n\u001b[22m\u001b[2m  Array [\u001b[22m\n\u001b[32m-   \"[Circuit Breaker: closed-record-failures0] Recorded failure #1.\",\u001b[90m\n\u001b[31m+   \"[Circuit Breaker: closed-record-failures0] Recorded failure #1. Last failure at 1749748956877\",\u001b[90m\n\u001b[2m    Object {\u001b[22m\n\u001b[32m-     \"error\": ObjectContaining {\u001b[90m\n\u001b[32m-       \"message\": \"Failure 1\",\u001b[90m\n\u001b[32m-     },\u001b[90m\n\u001b[31m+     \"error\": [Error: Failure 1],\u001b[90m\n\u001b[2m    },\u001b[22m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m\n    at Proxy.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1618:25)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:99:39\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","CLOSED state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker CLOSED state behavior should reset failure count on successful request","status":"failed","title":"should reset failure count on successful request","duration":3.5569000000000415,"failureMessages":["AssertionError: expected \"spy\" to be called with arguments: [ …(2) ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st spy call:\n\n\u001b[22m\u001b[2m  Array [\u001b[22m\n\u001b[32m-   \"[Circuit Breaker: closed-reset-on-success0] Recorded failure #1.\",\u001b[90m\n\u001b[31m+   \"[Circuit Breaker: closed-reset-on-success0] Recorded failure #1. Last failure at 1749748956909\",\u001b[90m\n\u001b[2m    Object {\u001b[22m\n\u001b[32m-     \"error\": Any<Error>,\u001b[90m\n\u001b[31m+     \"error\": [Error: One-time failure],\u001b[90m\n\u001b[2m    },\u001b[22m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m\n    at Proxy.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1618:25)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:134:39\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker OPEN state behavior should trip to OPEN state after reaching failure threshold","status":"failed","title":"should trip to OPEN state after reaching failure threshold","duration":4.145099999999957,"failureMessages":["AssertionError: expected error to have message: Circuit Breaker \"open-trip-circuit0\" is open and not accepting requests.\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:171:9\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker OPEN state behavior should fail fast with CircuitOpenError when circuit is open","status":"failed","title":"should fail fast with CircuitOpenError when circuit is open","duration":11.754699999999957,"failureMessages":["AssertionError: expected error to have message: Circuit Breaker \"open-fail-fast-circuit0\" is open and not accepting requests.\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:191:9\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","HALF-OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker HALF-OPEN state behavior should transition to HALF-OPEN after timeout and succeed on trial request","status":"failed","title":"should transition to HALF-OPEN after timeout and succeed on trial request","duration":2.8081000000000813,"failureMessages":["AssertionError: expected error to have message: Circuit Breaker \"half-open-success-circuit0\" is open and not accepting requests.\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:217:9\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","HALF-OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker HALF-OPEN state behavior should return to OPEN state if trial request fails","status":"failed","title":"should return to OPEN state if trial request fails","duration":3.1403000000000247,"failureMessages":["AssertionError: expected error to have message: Circuit Breaker \"half-open-fail-circuit0\" is open and not accepting requests.\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:262:9\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","HALF-OPEN state behavior"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker HALF-OPEN state behavior should only transition to HALF-OPEN after the full timeout period","status":"failed","title":"should only transition to HALF-OPEN after the full timeout period","duration":1.8491000000000213,"failureMessages":["AssertionError: expected error to have message: Circuit Breaker \"half-open-full-timeout-circuit0\" is open and not accepting requests.\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:277:9\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Configuration options"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Configuration options should respect custom failure threshold","status":"failed","title":"should respect custom failure threshold","duration":2.3024999999998954,"failureMessages":["AssertionError: expected \"spy\" to be called with arguments: [ …(2) ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st spy call:\n\n\u001b[22m\u001b[2m  Array [\u001b[22m\n\u001b[32m-   \"[Circuit Breaker: config-threshold-circuit0] Recorded failure #1.\",\u001b[90m\n\u001b[31m+   \"[Circuit Breaker: config-threshold-circuit0] Recorded failure #1. Last failure at 1749748956937\",\u001b[90m\n\u001b[2m    Object {\u001b[22m\n\u001b[32m-     \"error\": Any<Error>,\u001b[90m\n\u001b[31m+     \"error\": [Error: Fails],\u001b[90m\n\u001b[2m    },\u001b[22m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m\n    at Proxy.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1618:25)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:301:41\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Configuration options"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Configuration options should respect custom open state timeout","status":"failed","title":"should respect custom open state timeout","duration":2.2432999999999765,"failureMessages":["AssertionError: expected error to have message: Circuit Breaker \"config-custom-timeout-circuit0\" is open and not accepting requests.\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:327:9\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Configuration options"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Configuration options should respect custom isFailure predicate","status":"failed","title":"should respect custom isFailure predicate","duration":1.9166999999999916,"failureMessages":["AssertionError: expected error to be instance of TemporaryError\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:350:9\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Configuration options"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Configuration options should not count BacktrackSignal as failure by default","status":"failed","title":"should not count BacktrackSignal as failure by default","duration":1.7422000000000253,"failureMessages":["AssertionError: expected \"spy\" to be called with arguments: [ …(2) ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st spy call:\n\n\u001b[22m\u001b[2m  Array [\u001b[22m\n\u001b[32m-   \"[Circuit Breaker: config-backtrack-default-circuit0] Recorded failure #1.\",\u001b[90m\n\u001b[31m+   \"[Circuit Breaker: config-backtrack-default-circuit0] Recorded failure #1. Last failure at 1749748956944\",\u001b[90m\n\u001b[2m    Object {\u001b[22m\n\u001b[32m-     \"error\": ObjectContaining {\u001b[90m\n\u001b[32m-       \"message\": \"Real failure after backtrack\",\u001b[90m\n\u001b[32m-     },\u001b[90m\n\u001b[31m+     \"error\": [Error: Real failure after backtrack],\u001b[90m\n\u001b[2m    },\u001b[22m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m\n    at Proxy.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1618:25)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:388:39\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Multiple circuit instances"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Multiple circuit instances should maintain separate state for different circuit IDs","status":"failed","title":"should maintain separate state for different circuit IDs","duration":1.324700000000007,"failureMessages":["AssertionError: expected error to have message: Circuit Breaker \"multi-instance-id-A1\" is open and not accepting requests.\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:415:9\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Context integration"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Context integration should work without logger in context if context only has scope","status":"passed","title":"should work without logger in context if context only has scope","duration":0.8140000000000782,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Context integration"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Context integration should use context logger when available","status":"failed","title":"should use context logger when available","duration":1.476099999999974,"failureMessages":["AssertionError: expected \"spy\" to be called with arguments: [ …(2) ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st spy call:\n\n\u001b[22m\u001b[2m  Array [\u001b[22m\n\u001b[32m-   \"[Circuit Breaker: ctx-custom-logger-circuit-B0] Recorded failure #1.\",\u001b[90m\n\u001b[31m+   \"[Circuit Breaker: ctx-custom-logger-circuit-B0] Recorded failure #1. Last failure at 1749748956948\",\u001b[90m\n\u001b[2m    Object {\u001b[22m\n\u001b[32m-     \"error\": ObjectContaining {\u001b[90m\n\u001b[32m-       \"message\": \"Custom logger error\",\u001b[90m\n\u001b[32m-     },\u001b[90m\n\u001b[31m+     \"error\": [Error: Custom logger error],\u001b[90m\n\u001b[2m    },\u001b[22m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m\n    at Proxy.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1465:13)\n    at Proxy.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Proxy.methodWrapper (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1618:25)\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:455:40\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Edge cases and error scenarios"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Edge cases and error scenarios should handle undefined and null values correctly as input","status":"passed","title":"should handle undefined and null values correctly as input","duration":0.6748000000000047,"failureMessages":[],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Edge cases and error scenarios"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Edge cases and error scenarios should handle rapid successive calls correctly (trial request)","status":"failed","title":"should handle rapid successive calls correctly (trial request)","duration":5015.4193000000005,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Edge cases and error scenarios"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Edge cases and error scenarios should maintain state across different run calls if ID is the same","status":"failed","title":"should maintain state across different run calls if ID is the same","duration":1.3420999999998457,"failureMessages":["AssertionError: expected error to have message: Circuit Breaker \"fixed-id-for-shared-state-test-runs-B\" is open and not accepting requests.\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:549:9\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)\n    at startTests (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1271:3)"],"meta":{}},{"ancestorTitles":["Circuit Breaker (circuit-breaker.ts)","withCircuitBreaker","Recovery scenarios"],"fullName":"Circuit Breaker (circuit-breaker.ts) withCircuitBreaker Recovery scenarios should handle mixed success/failure patterns correctly","status":"failed","title":"should handle mixed success/failure patterns correctly","duration":2.5833000000002357,"failureMessages":["AssertionError: expected error to have message: Circuit Breaker \"recovery-mixed-pattern-circuit-B0\" is open and not accepting requests.\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31\n    at C:\\Users\\Pglenn\\effectively\\test\\circuit-breaker.test.ts:579:9\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)\n    at startTests (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1271:3)"],"meta":{}}],"startTime":1749748956870,"endTime":1749748961970.5833,"status":"failed","message":"","name":"C:/Users/Pglenn/effectively/test/circuit-breaker.test.ts"},{"assertionResults":[{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","pipe"],"fullName":"Composition Utilities (utils.ts) Core composition functions pipe should pipe a value through a sequence of functions","status":"passed","title":"should pipe a value through a sequence of functions","duration":3.420400000000086,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","pipe"],"fullName":"Composition Utilities (utils.ts) Core composition functions pipe should work with a single function","status":"passed","title":"should work with a single function","duration":0.7457000000000562,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","pipe"],"fullName":"Composition Utilities (utils.ts) Core composition functions pipe should return the value unchanged when no functions provided","status":"passed","title":"should return the value unchanged when no functions provided","duration":0.5612999999999602,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","pipe"],"fullName":"Composition Utilities (utils.ts) Core composition functions pipe should handle complex transformations","status":"passed","title":"should handle complex transformations","duration":0.59800000000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","flow"],"fullName":"Composition Utilities (utils.ts) Core composition functions flow should compose functions from left to right","status":"passed","title":"should compose functions from left to right","duration":0.5723000000000411,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","flow"],"fullName":"Composition Utilities (utils.ts) Core composition functions flow should handle functions with multiple arguments in first function","status":"passed","title":"should handle functions with multiple arguments in first function","duration":0.5988000000000966,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","flow"],"fullName":"Composition Utilities (utils.ts) Core composition functions flow should handle single function","status":"passed","title":"should handle single function","duration":0.5282999999999447,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Core composition functions","flow"],"fullName":"Composition Utilities (utils.ts) Core composition functions flow should handle no functions","status":"passed","title":"should handle no functions","duration":0.4533999999999878,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should chain tasks together sequentially","status":"passed","title":"should chain tasks together sequentially","duration":4.62519999999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should work with plain functions","status":"passed","title":"should work with plain functions","duration":1.0407000000000153,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should handle single task workflow","status":"passed","title":"should handle single task workflow","duration":0.7653000000000247,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should pass context through workflow","status":"passed","title":"should pass context through workflow","duration":0.9329999999999927,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","createWorkflow and chain"],"fullName":"Composition Utilities (utils.ts) Workflow creation createWorkflow and chain should chain alias work identically","status":"passed","title":"should chain alias work identically","duration":2.0446999999999207,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromValue"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromValue should start workflow with static value","status":"passed","title":"should start workflow with static value","duration":5.841100000000097,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromValue"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromValue should work with complex objects","status":"passed","title":"should work with complex objects","duration":1.1032000000000153,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromPromise"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromPromise should start workflow with promise","status":"passed","title":"should start workflow with promise","duration":0.9838000000000875,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromPromise"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromPromise should handle rejected promises","status":"passed","title":"should handle rejected promises","duration":2.6394000000000233,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromPromiseFn"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromPromiseFn should start workflow with context-dependent function","status":"passed","title":"should start workflow with context-dependent function","duration":0.8348999999999478,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Workflow creation","Workflow starters","fromPromiseFn"],"fullName":"Composition Utilities (utils.ts) Workflow creation Workflow starters fromPromiseFn should pass context correctly","status":"passed","title":"should pass context correctly","duration":0.79849999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","map"],"fullName":"Composition Utilities (utils.ts) Pipeable operators map should transform values in a workflow","status":"passed","title":"should transform values in a workflow","duration":1.165899999999965,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","map"],"fullName":"Composition Utilities (utils.ts) Pipeable operators map should work with async mapping functions","status":"failed","title":"should work with async mapping functions","duration":5016.9701,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","map"],"fullName":"Composition Utilities (utils.ts) Pipeable operators map should pass context to mapping function","status":"passed","title":"should pass context to mapping function","duration":0.8033999999997832,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","flatMap"],"fullName":"Composition Utilities (utils.ts) Pipeable operators flatMap should transform values into new tasks","status":"passed","title":"should transform values into new tasks","duration":0.6329999999998108,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","flatMap"],"fullName":"Composition Utilities (utils.ts) Pipeable operators flatMap should pass context to flatMap function","status":"passed","title":"should pass context to flatMap function","duration":0.5296999999991385,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","pick"],"fullName":"Composition Utilities (utils.ts) Pipeable operators pick should pick specified keys from object","status":"passed","title":"should pick specified keys from object","duration":0.5515000000004875,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Pipeable operators","pick"],"fullName":"Composition Utilities (utils.ts) Pipeable operators pick should handle missing keys gracefully","status":"passed","title":"should handle missing keys gracefully","duration":0.43879999999990105,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Direct composition helpers","mapTask"],"fullName":"Composition Utilities (utils.ts) Direct composition helpers mapTask should transform task output","status":"passed","title":"should transform task output","duration":0.559200000000601,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Direct composition helpers","mapTask"],"fullName":"Composition Utilities (utils.ts) Direct composition helpers mapTask should work with async mappers","status":"failed","title":"should work with async mappers","duration":5015.2513,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Direct composition helpers","andThenTask"],"fullName":"Composition Utilities (utils.ts) Direct composition helpers andThenTask should chain tasks with direct composition","status":"passed","title":"should chain tasks with direct composition","duration":1.0769000000000233,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","when"],"fullName":"Composition Utilities (utils.ts) Flow control and logic when should execute task when predicate is true","status":"passed","title":"should execute task when predicate is true","duration":0.599899999999252,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","when"],"fullName":"Composition Utilities (utils.ts) Flow control and logic when should skip task when predicate is false","status":"passed","title":"should skip task when predicate is false","duration":0.4537000000000262,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","when"],"fullName":"Composition Utilities (utils.ts) Flow control and logic when should work with async predicates","status":"failed","title":"should work with async predicates","duration":5011.0918,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","when"],"fullName":"Composition Utilities (utils.ts) Flow control and logic when should pass context to predicate","status":"passed","title":"should pass context to predicate","duration":0.5913999999993393,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","unless"],"fullName":"Composition Utilities (utils.ts) Flow control and logic unless should execute task when predicate is false","status":"passed","title":"should execute task when predicate is false","duration":0.5774000000001251,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","unless"],"fullName":"Composition Utilities (utils.ts) Flow control and logic unless should skip task when predicate is true","status":"passed","title":"should skip task when predicate is true","duration":0.5229999999992287,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","doWhile"],"fullName":"Composition Utilities (utils.ts) Flow control and logic doWhile should execute task repeatedly while condition is true","status":"passed","title":"should execute task repeatedly while condition is true","duration":0.5578000000004977,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","doWhile"],"fullName":"Composition Utilities (utils.ts) Flow control and logic doWhile should not execute if condition is initially false","status":"passed","title":"should not execute if condition is initially false","duration":0.4598999999998341,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","doWhile"],"fullName":"Composition Utilities (utils.ts) Flow control and logic doWhile should respect abort signals","status":"failed","title":"should respect abort signals","duration":5006.0743,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","tap"],"fullName":"Composition Utilities (utils.ts) Flow control and logic tap should perform side effects without changing value","status":"passed","title":"should perform side effects without changing value","duration":0.797999999998865,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","tap"],"fullName":"Composition Utilities (utils.ts) Flow control and logic tap should work with async side effects","status":"failed","title":"should work with async side effects","duration":5005.559500000003,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","tap"],"fullName":"Composition Utilities (utils.ts) Flow control and logic tap should pass context to side effect function","status":"passed","title":"should pass context to side effect function","duration":1.868800000000192,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","sleep"],"fullName":"Composition Utilities (utils.ts) Flow control and logic sleep should pause workflow for specified duration","status":"failed","title":"should pause workflow for specified duration","duration":5010.007399999999,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Flow control and logic","sleep"],"fullName":"Composition Utilities (utils.ts) Flow control and logic sleep should respect abort signals","status":"passed","title":"should respect abort signals","duration":1.3417000000008557,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","tapError"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience tapError should perform side effects on error without catching it","status":"passed","title":"should perform side effects on error without catching it","duration":1.586299999999028,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","tapError"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience tapError should not perform side effect on success","status":"passed","title":"should not perform side effect on success","duration":2.2655999999988126,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","tapError"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience tapError should pass context to error handler","status":"passed","title":"should pass context to error handler","duration":3.735500000002503,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","attempt"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience attempt should convert exceptions to Result type","status":"passed","title":"should convert exceptions to Result type","duration":2.559400000001915,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","attempt"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience attempt should wrap successful results in Ok","status":"passed","title":"should wrap successful results in Ok","duration":1.668099999998958,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should retry failed tasks","status":"failed","title":"should retry failed tasks","duration":5006.693500000001,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should fail after max attempts","status":"failed","title":"should fail after max attempts","duration":5006.730300000003,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should use exponential backoff","status":"failed","title":"should use exponential backoff","duration":5009.998800000001,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should respect shouldRetry predicate","status":"failed","title":"should respect shouldRetry predicate","duration":5015.2762,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Error handling and resilience","withRetry"],"fullName":"Composition Utilities (utils.ts) Error handling and resilience withRetry should not retry when shouldRetry returns false","status":"passed","title":"should not retry when shouldRetry returns false","duration":1.0872999999992317,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withName"],"fullName":"Composition Utilities (utils.ts) Task enhancers withName should attach name to task","status":"passed","title":"should attach name to task","duration":2.546199999997043,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withName"],"fullName":"Composition Utilities (utils.ts) Task enhancers withName should preserve task functionality","status":"passed","title":"should preserve task functionality","duration":2.0112000000008265,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","memoize"],"fullName":"Composition Utilities (utils.ts) Task enhancers memoize should cache results based on input","status":"failed","title":"should cache results based on input","duration":5009.7557000000015,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","memoize"],"fullName":"Composition Utilities (utils.ts) Task enhancers memoize should use deep equality for cache keys","status":"passed","title":"should use deep equality for cache keys","duration":1.1758999999947264,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","once"],"fullName":"Composition Utilities (utils.ts) Task enhancers once should execute task only once","status":"passed","title":"should execute task only once","duration":0.8642000000036205,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","once"],"fullName":"Composition Utilities (utils.ts) Task enhancers once should share the same promise across calls","status":"passed","title":"should share the same promise across calls","duration":1.107799999997951,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withTimeout"],"fullName":"Composition Utilities (utils.ts) Task enhancers withTimeout should timeout long-running tasks","status":"passed","title":"should timeout long-running tasks","duration":2.476300000002084,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withTimeout"],"fullName":"Composition Utilities (utils.ts) Task enhancers withTimeout should complete fast tasks normally","status":"passed","title":"should complete fast tasks normally","duration":0.9642000000021653,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withTimeout"],"fullName":"Composition Utilities (utils.ts) Task enhancers withTimeout should clean up timers on abort","status":"failed","title":"should clean up timers on abort","duration":5005.488799999999,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withState"],"fullName":"Composition Utilities (utils.ts) Task enhancers withState should manage stateful workflows","status":"passed","title":"should manage stateful workflows","duration":1.1273999999975786,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Task enhancers","withState"],"fullName":"Composition Utilities (utils.ts) Task enhancers withState should initialize state with input value","status":"passed","title":"should initialize state with input value","duration":0.5798999999969965,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withThrottle"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withThrottle should throttle task execution","status":"passed","title":"should throttle task execution","duration":1.3373999999967054,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withThrottle"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withThrottle should respect abort signals in throttle queue","status":"failed","title":"should respect abort signals in throttle queue","duration":5003.691100000004,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withPoll"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withPoll should poll until condition is met","status":"failed","title":"should poll until condition is met","duration":5014.099300000002,"failureMessages":["Error: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n    at Timeout.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:44:18)\n    at listOnTimeout (node:internal/timers:614:17)\n    at processTimers (node:internal/timers:549:7)"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withPoll"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withPoll should timeout if condition is never met","status":"passed","title":"should timeout if condition is never met","duration":1.3095000000030268,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","createBatchingTask"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching createBatchingTask should batch multiple calls","status":"passed","title":"should batch multiple calls","duration":1.0299999999988358,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","createBatchingTask"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching createBatchingTask should handle batch function errors","status":"passed","title":"should handle batch function errors","duration":1.0151000000041677,"failureMessages":[],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","createBatchingTask"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching createBatchingTask should respect abort signals in batch queue","status":"failed","title":"should respect abort signals in batch queue","duration":5.615600000004633,"failureMessages":["AssertionError: expected [Function] to throw error including 'Aborted' but got 'Task failed: This operation was abort…'\n    at Assertion.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1509:21)\n    at Assertion.<anonymous> (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:972:17)\n    at Assertion.methodWrapper (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/chai@5.2.0/node_modules/chai/chai.js:1618:25)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+expect@2.1.9/node_modules/@vitest/expect/dist/index.js:1849:31"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withDebounce"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withDebounce should debounce rapid calls","status":"failed","title":"should debounce rapid calls","duration":9.519100000004983,"failureMessages":["AssertionError: expected [ 'processed-first', …(2) ] to deeply equal [ 'processed-third', …(2) ]\n    at C:\\Users\\Pglenn\\effectively\\test\\composition-utils.test.ts:1077:25\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:533:5\n    at runTest (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1056:11)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1262:5)\n    at startTests (file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/@vitest+runner@2.1.9/node_modules/@vitest/runner/dist/index.js:1271:3)\n    at file:///C:/Users/Pglenn/effectively/node_modules/.pnpm/vitest@2.1.9_@types+node@22.15.31_jsdom@26.1.0/node_modules/vitest/dist/chunks/runBaseTests.3qpJUEJM.js:126:11"],"meta":{}},{"ancestorTitles":["Composition Utilities (utils.ts)","Advanced scheduling and batching","withDebounce"],"fullName":"Composition Utilities (utils.ts) Advanced scheduling and batching withDebounce should execute after debounce period","status":"passed","title":"should execute after debounce period","duration":1.5478000000002794,"failureMessages":[],"meta":{}}],"startTime":1749748956871,"endTime":1749749027106.5479,"status":"failed","message":"","name":"C:/Users/Pglenn/effectively/test/composition-utils.test.ts"},{"assertionResults":[{"ancestorTitles":["Core Execution Engine (run.ts)","createContext and basic execution"],"fullName":"Core Execution Engine (run.ts) createContext and basic execution should create a context and run a simple task","status":"passed","title":"should create a context and run a simple task","duration":3.8963999999999714,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","createContext and basic execution"],"fullName":"Core Execution Engine (run.ts) createContext and basic execution should provide context to tasks","status":"passed","title":"should provide context to tasks","duration":0.8439000000000192,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","createContext and basic execution"],"fullName":"Core Execution Engine (run.ts) createContext and basic execution should handle context overrides","status":"passed","title":"should handle context overrides","duration":0.5226000000000113,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","createContext and basic execution"],"fullName":"Core Execution Engine (run.ts) createContext and basic execution should handle database operations through context","status":"passed","title":"should handle database operations through context","duration":2.4945999999999913,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Error handling and Result types"],"fullName":"Core Execution Engine (run.ts) Error handling and Result types should throw errors by default","status":"passed","title":"should throw errors by default","duration":1.9342999999999506,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Error handling and Result types"],"fullName":"Core Execution Engine (run.ts) Error handling and Result types should return Result when throw: false","status":"passed","title":"should return Result when throw: false","duration":0.8775999999999726,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Error handling and Result types"],"fullName":"Core Execution Engine (run.ts) Error handling and Result types should handle successful tasks with throw: false","status":"passed","title":"should handle successful tasks with throw: false","duration":0.6599999999999682,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Backtracking and control flow"],"fullName":"Core Execution Engine (run.ts) Backtracking and control flow should handle BacktrackSignal correctly","status":"passed","title":"should handle BacktrackSignal correctly","duration":0.8308000000000106,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Backtracking and control flow"],"fullName":"Core Execution Engine (run.ts) Backtracking and control flow should identify BacktrackSignal with type guard","status":"passed","title":"should identify BacktrackSignal with type guard","duration":0.5572999999999979,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Backtracking and control flow"],"fullName":"Core Execution Engine (run.ts) Backtracking and control flow should prevent infinite backtracking loops","status":"passed","title":"should prevent infinite backtracking loops","duration":50.234800000000064,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context getters and safety"],"fullName":"Core Execution Engine (run.ts) Context getters and safety should throw ContextNotFoundError when getContext called outside run","status":"passed","title":"should throw ContextNotFoundError when getContext called outside run","duration":0.4814999999999827,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context getters and safety"],"fullName":"Core Execution Engine (run.ts) Context getters and safety should return error Result when getContextSafe called outside run","status":"passed","title":"should return error Result when getContextSafe called outside run","duration":5.011700000000019,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context getters and safety"],"fullName":"Core Execution Engine (run.ts) Context getters and safety should return undefined when getContextOrUndefined called outside run","status":"passed","title":"should return undefined when getContextOrUndefined called outside run","duration":0.3589999999999236,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context getters and safety"],"fullName":"Core Execution Engine (run.ts) Context getters and safety should work correctly inside run","status":"passed","title":"should work correctly inside run","duration":0.5677999999999201,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Smart, Local, and Global context functions"],"fullName":"Core Execution Engine (run.ts) Smart, Local, and Global context functions should use global context as fallback for smart functions","status":"passed","title":"should use global context as fallback for smart functions","duration":0.8528999999999769,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Smart, Local, and Global context functions"],"fullName":"Core Execution Engine (run.ts) Smart, Local, and Global context functions should throw errors for local-only functions when no context","status":"passed","title":"should throw errors for local-only functions when no context","duration":0.575800000000072,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Smart, Local, and Global context functions"],"fullName":"Core Execution Engine (run.ts) Smart, Local, and Global context functions should work with global-only functions","status":"passed","title":"should work with global-only functions","duration":0.4577000000000453,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","provide function and context overrides"],"fullName":"Core Execution Engine (run.ts) provide function and context overrides should temporarily override context values","status":"passed","title":"should temporarily override context values","duration":0.9216000000000122,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","provide function and context overrides"],"fullName":"Core Execution Engine (run.ts) provide function and context overrides should nest provide calls correctly","status":"passed","title":"should nest provide calls correctly","duration":1.0580999999999676,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","provide function and context overrides"],"fullName":"Core Execution Engine (run.ts) provide function and context overrides should preserve scope in provide calls","status":"passed","title":"should preserve scope in provide calls","duration":0.663599999999974,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context validation and merging"],"fullName":"Core Execution Engine (run.ts) Context validation and merging should validate context with schema","status":"passed","title":"should validate context with schema","duration":0.8694000000000415,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context validation and merging"],"fullName":"Core Execution Engine (run.ts) Context validation and merging should merge contexts correctly","status":"passed","title":"should merge contexts correctly","duration":0.3874999999999318,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Context validation and merging"],"fullName":"Core Execution Engine (run.ts) Context validation and merging should require context properties","status":"passed","title":"should require context properties","duration":1.6153000000000475,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Dependency injection"],"fullName":"Core Execution Engine (run.ts) Dependency injection should create and use injection tokens","status":"passed","title":"should create and use injection tokens","duration":0.7177000000000362,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Dependency injection"],"fullName":"Core Execution Engine (run.ts) Dependency injection should handle optional injection","status":"passed","title":"should handle optional injection","duration":0.4376999999999498,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Dependency injection"],"fullName":"Core Execution Engine (run.ts) Dependency injection should throw when required injection not found","status":"passed","title":"should throw when required injection not found","duration":0.6002999999999474,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Cancellation and abort signals"],"fullName":"Core Execution Engine (run.ts) Cancellation and abort signals should propagate abort signals to context scope","status":"passed","title":"should propagate abort signals to context scope","duration":0.7402999999999338,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Cancellation and abort signals"],"fullName":"Core Execution Engine (run.ts) Cancellation and abort signals should handle abort during execution","status":"passed","title":"should handle abort during execution","duration":27.31860000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Logging"],"fullName":"Core Execution Engine (run.ts) Logging should use provided logger","status":"passed","title":"should use provided logger","duration":0.9248000000000047,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Logging"],"fullName":"Core Execution Engine (run.ts) Logging should handle errors with logger","status":"passed","title":"should handle errors with logger","duration":1.571299999999951,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Edge cases and error scenarios"],"fullName":"Core Execution Engine (run.ts) Edge cases and error scenarios should handle null/undefined inputs gracefully","status":"passed","title":"should handle null/undefined inputs gracefully","duration":1.294300000000021,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Edge cases and error scenarios"],"fullName":"Core Execution Engine (run.ts) Edge cases and error scenarios should handle deeply nested task execution","status":"passed","title":"should handle deeply nested task execution","duration":0.9104999999999563,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Execution Engine (run.ts)","Edge cases and error scenarios"],"fullName":"Core Execution Engine (run.ts) Edge cases and error scenarios should preserve context through complex async operations","status":"passed","title":"should preserve context through complex async operations","duration":22.239200000000096,"failureMessages":[],"meta":{}}],"startTime":1749748956862,"endTime":1749748957004.2393,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/core-run.test.ts"},{"assertionResults":[{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should perform parallel map and sequential reduce","status":"passed","title":"should perform parallel map and sequential reduce","duration":32.0822,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should handle empty arrays","status":"passed","title":"should handle empty arrays","duration":0.5431999999999562,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should handle single element arrays","status":"passed","title":"should handle single element arrays","duration":1.859800000000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should work with complex data types","status":"passed","title":"should work with complex data types","duration":3.1585000000000036,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should work with string concatenation","status":"passed","title":"should work with string concatenation","duration":0.9923000000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should handle concurrency limits","status":"passed","title":"should handle concurrency limits","duration":77.38579999999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","mapReduce"],"fullName":"Data Processing (data-processing.ts) mapReduce should handle task failures gracefully","status":"passed","title":"should handle task failures gracefully","duration":2.6357000000000426,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should filter array based on async predicate","status":"passed","title":"should filter array based on async predicate","duration":28.582400000000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should handle empty arrays","status":"passed","title":"should handle empty arrays","duration":0.8605000000000018,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should handle arrays where no items pass filter","status":"passed","title":"should handle arrays where no items pass filter","duration":7.63659999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should handle arrays where all items pass filter","status":"passed","title":"should handle arrays where all items pass filter","duration":5.885400000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should work with complex data types","status":"passed","title":"should work with complex data types","duration":18.826299999999947,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should respect concurrency limits","status":"passed","title":"should respect concurrency limits","duration":121.00630000000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should handle predicate task failures","status":"passed","title":"should handle predicate task failures","duration":15.903599999999983,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","filter"],"fullName":"Data Processing (data-processing.ts) filter should maintain original order of elements","status":"passed","title":"should maintain original order of elements","duration":30.45060000000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should group items by key generated from async task","status":"passed","title":"should group items by key generated from async task","duration":17.79819999999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle empty arrays","status":"passed","title":"should handle empty arrays","duration":0.4248999999999796,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle arrays with single group","status":"passed","title":"should handle arrays with single group","duration":12.443199999999933,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should work with complex data types","status":"passed","title":"should work with complex data types","duration":16.47109999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle numeric keys","status":"passed","title":"should handle numeric keys","duration":14.145399999999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should respect concurrency limits","status":"passed","title":"should respect concurrency limits","duration":93.57319999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle keying task failures","status":"passed","title":"should handle keying task failures","duration":0.7459999999999809,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should maintain insertion order within groups","status":"passed","title":"should maintain insertion order within groups","duration":15.221199999999953,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","groupBy"],"fullName":"Data Processing (data-processing.ts) groupBy should handle duplicate keys correctly","status":"passed","title":"should handle duplicate keys correctly","duration":2.734700000000089,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","Integration tests"],"fullName":"Data Processing (data-processing.ts) Integration tests should combine mapReduce with filter for complex processing","status":"passed","title":"should combine mapReduce with filter for complex processing","duration":30.612300000000005,"failureMessages":[],"meta":{}},{"ancestorTitles":["Data Processing (data-processing.ts)","Integration tests"],"fullName":"Data Processing (data-processing.ts) Integration tests should use groupBy with mapReduce for aggregation","status":"passed","title":"should use groupBy with mapReduce for aggregation","duration":46.24869999999987,"failureMessages":[],"meta":{}}],"startTime":1749748957500,"endTime":1749748958100.2488,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/data-processing.test.ts"},{"assertionResults":[{"ancestorTitles":["Debug Provide"],"fullName":"Debug Provide should work with context-specific provide","status":"passed","title":"should work with context-specific provide","duration":3.7110000000000127,"failureMessages":[],"meta":{}},{"ancestorTitles":["Debug Provide"],"fullName":"Debug Provide should work with global provide","status":"passed","title":"should work with global provide","duration":0.8832000000000448,"failureMessages":[],"meta":{}}],"startTime":1749748958312,"endTime":1749748958316.8833,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/debug-provide.test.ts"},{"assertionResults":[{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should execute simple do block with tasks","status":"passed","title":"should execute simple do block with tasks","duration":2.946700000000021,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle input values","status":"passed","title":"should handle input values","duration":0.684599999999989,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle plain values with pure","status":"passed","title":"should handle plain values with pure","duration":0.6281000000000176,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle Promise values","status":"passed","title":"should handle Promise values","duration":0.4504000000000019,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle Result types - success case","status":"passed","title":"should handle Result types - success case","duration":0.5593000000000075,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle Result types - error case","status":"passed","title":"should handle Result types - error case","duration":2.2659000000000447,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should propagate errors from tasks","status":"passed","title":"should propagate errors from tasks","duration":0.6462000000000216,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","doTask"],"fullName":"Do Notation doTask should handle try/catch in generators","status":"passed","title":"should handle try/catch in generators","duration":0.5311999999999557,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","context-specific doTask"],"fullName":"Do Notation context-specific doTask should work with typed context","status":"passed","title":"should work with typed context","duration":0.8645000000000209,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","context-specific doTask"],"fullName":"Do Notation context-specific doTask should work with doBlock for no-input workflows","status":"passed","title":"should work with doBlock for no-input workflows","duration":0.5717000000000212,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","conditional functions"],"fullName":"Do Notation conditional functions should execute doWhen with true condition","status":"passed","title":"should execute doWhen with true condition","duration":0.46299999999996544,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","conditional functions"],"fullName":"Do Notation conditional functions should execute doWhen with false condition","status":"passed","title":"should execute doWhen with false condition","duration":0.38690000000002556,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","conditional functions"],"fullName":"Do Notation conditional functions should execute doUnless with false condition","status":"passed","title":"should execute doUnless with false condition","duration":0.4420000000000073,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","conditional functions"],"fullName":"Do Notation conditional functions should skip doUnless with true condition","status":"passed","title":"should skip doUnless with true condition","duration":0.4796000000000049,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","sequence function"],"fullName":"Do Notation sequence function should execute tasks in sequence and collect results","status":"passed","title":"should execute tasks in sequence and collect results","duration":1.019800000000032,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","sequence function"],"fullName":"Do Notation sequence function should handle empty sequence","status":"passed","title":"should handle empty sequence","duration":0.27410000000003265,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","forEach function"],"fullName":"Do Notation forEach function should iterate over items and execute generator for each","status":"passed","title":"should iterate over items and execute generator for each","duration":0.47819999999995844,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","forEach function"],"fullName":"Do Notation forEach function should handle empty array","status":"passed","title":"should handle empty array","duration":0.252900000000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["Do Notation","integration tests"],"fullName":"Do Notation integration tests should handle complex workflow with multiple patterns","status":"passed","title":"should handle complex workflow with multiple patterns","duration":0.47390000000001464,"failureMessages":[],"meta":{}}],"startTime":1749748957576,"endTime":1749748957592.4739,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/do-notation.test.ts"},{"assertionResults":[{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should create a basic custom error type","status":"passed","title":"should create a basic custom error type","duration":2.68220000000008,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should create hierarchical error types","status":"passed","title":"should create hierarchical error types","duration":0.6632000000000744,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should create multi-level inheritance hierarchies","status":"passed","title":"should create multi-level inheritance hierarchies","duration":0.39809999999999945,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should handle custom constructor parameters","status":"passed","title":"should handle custom constructor parameters","duration":0.24900000000002365,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should maintain proper stack traces","status":"passed","title":"should maintain proper stack traces","duration":6.171199999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should set constructor name properly","status":"passed","title":"should set constructor name properly","duration":0.26350000000002183,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorType"],"fullName":"Error Handling (errors.ts) createErrorType should handle errors with no message","status":"passed","title":"should handle errors with no message","duration":0.3564999999999827,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorHandler"],"fullName":"Error Handling (errors.ts) createErrorHandler should create a typed error handler tuple","status":"passed","title":"should create a typed error handler tuple","duration":1.405300000000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorHandler"],"fullName":"Error Handling (errors.ts) createErrorHandler should provide correct error typing in handler","status":"passed","title":"should provide correct error typing in handler","duration":0.6721000000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","createErrorHandler"],"fullName":"Error Handling (errors.ts) createErrorHandler should work with async handlers","status":"passed","title":"should work with async handlers","duration":10.561999999999898,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should catch and handle specific errors","status":"passed","title":"should catch and handle specific errors","duration":5.286600000000021,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should handle hierarchical errors correctly","status":"passed","title":"should handle hierarchical errors correctly","duration":1.7819000000000642,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should match handlers in order","status":"passed","title":"should match handlers in order","duration":1.8857000000000426,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should not catch BacktrackSignal errors","status":"passed","title":"should not catch BacktrackSignal errors","duration":1.6379000000000588,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should rethrow unhandled errors","status":"passed","title":"should rethrow unhandled errors","duration":3.269200000000069,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should pass context to error handlers","status":"passed","title":"should pass context to error handlers","duration":1.334699999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should handle async error handlers","status":"passed","title":"should handle async error handlers","duration":12.673999999999978,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should work with successful tasks","status":"passed","title":"should work with successful tasks","duration":0.7513000000000147,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should handle non-Error thrown values","status":"passed","title":"should handle non-Error thrown values","duration":0.5819999999999936,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","withErrorBoundary"],"fullName":"Error Handling (errors.ts) withErrorBoundary should handle multiple error types in complex workflows","status":"passed","title":"should handle multiple error types in complex workflows","duration":0.8924999999999272,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should convert successful sync functions to Ok results","status":"passed","title":"should convert successful sync functions to Ok results","duration":0.4048000000000229,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should convert successful async functions to Ok results","status":"passed","title":"should convert successful async functions to Ok results","duration":12.708799999999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should convert thrown errors to Err results","status":"passed","title":"should convert thrown errors to Err results","duration":0.3503000000000611,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should convert async thrown errors to Err results","status":"passed","title":"should convert async thrown errors to Err results","duration":14.065699999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should handle non-Error thrown values","status":"passed","title":"should handle non-Error thrown values","duration":0.5475000000000136,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should preserve function arguments","status":"passed","title":"should preserve function arguments","duration":0.5258999999999787,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should work with functions that return undefined","status":"passed","title":"should work with functions that return undefined","duration":0.440900000000056,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should work with functions that return null","status":"passed","title":"should work with functions that return null","duration":0.2676999999999907,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should handle custom error types","status":"passed","title":"should handle custom error types","duration":0.682700000000068,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","tryCatch"],"fullName":"Error Handling (errors.ts) tryCatch should work with API-like functions","status":"passed","title":"should work with API-like functions","duration":0.7167000000000598,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","Integration with task workflows"],"fullName":"Error Handling (errors.ts) Integration with task workflows should integrate error boundaries with complex workflows","status":"passed","title":"should integrate error boundaries with complex workflows","duration":0.9121000000000095,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling (errors.ts)","Integration with task workflows"],"fullName":"Error Handling (errors.ts) Integration with task workflows should combine tryCatch with task workflows","status":"passed","title":"should combine tryCatch with task workflows","duration":1.059099999999944,"failureMessages":[],"meta":{}}],"startTime":1749748956891,"endTime":1749748956979.059,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/error-handling.test.ts"},{"assertionResults":[{"ancestorTitles":["Global Provide Function Fix"],"fullName":"Global Provide Function Fix should properly enhance context when provide is called within existing context","status":"passed","title":"should properly enhance context when provide is called within existing context","duration":4.598799999999983,"failureMessages":[],"meta":{}},{"ancestorTitles":["Global Provide Function Fix"],"fullName":"Global Provide Function Fix should work with nested provide calls","status":"passed","title":"should work with nested provide calls","duration":1.3192000000000235,"failureMessages":[],"meta":{}}],"startTime":1749748958000,"endTime":1749748958005.319,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/global-provide-fix.test.ts"},{"assertionResults":[{"ancestorTitles":["Resource Management (bracket.ts)","bracket function"],"fullName":"Resource Management (bracket.ts) bracket function should acquire, use, and release resources correctly","status":"passed","title":"should acquire, use, and release resources correctly","duration":4.2771999999999935,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracket function"],"fullName":"Resource Management (bracket.ts) bracket function should release resources even when use task throws","status":"passed","title":"should release resources even when use task throws","duration":2.1527000000000953,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracket function"],"fullName":"Resource Management (bracket.ts) bracket function should handle errors in acquire phase","status":"passed","title":"should handle errors in acquire phase","duration":0.7576999999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracket function"],"fullName":"Resource Management (bracket.ts) bracket function should handle errors in release phase","status":"passed","title":"should handle errors in release phase","duration":1.8097000000000207,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracket function"],"fullName":"Resource Management (bracket.ts) bracket function should handle errors in both use and release phases","status":"passed","title":"should handle errors in both use and release phases","duration":4.789300000000026,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracket function"],"fullName":"Resource Management (bracket.ts) bracket function should work with complex resource merging","status":"passed","title":"should work with complex resource merging","duration":0.8654000000000224,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Disposable utilities","isDisposable and isAsyncDisposable"],"fullName":"Resource Management (bracket.ts) Disposable utilities isDisposable and isAsyncDisposable should correctly identify disposable objects","status":"passed","title":"should correctly identify disposable objects","duration":0.8146999999999025,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Disposable utilities","makeDisposable"],"fullName":"Resource Management (bracket.ts) Disposable utilities makeDisposable should create a synchronous disposable wrapper","status":"passed","title":"should create a synchronous disposable wrapper","duration":0.45879999999999654,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Disposable utilities","makeDisposable"],"fullName":"Resource Management (bracket.ts) Disposable utilities makeDisposable should preserve original object properties","status":"passed","title":"should preserve original object properties","duration":0.6748999999999796,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Disposable utilities","makeAsyncDisposable"],"fullName":"Resource Management (bracket.ts) Disposable utilities makeAsyncDisposable should create an asynchronous disposable wrapper","status":"passed","title":"should create an asynchronous disposable wrapper","duration":20.48339999999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Disposable utilities","makeAsyncDisposable"],"fullName":"Resource Management (bracket.ts) Disposable utilities makeAsyncDisposable should preserve original object properties","status":"passed","title":"should preserve original object properties","duration":0.46510000000000673,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracketDisposable"],"fullName":"Resource Management (bracket.ts) bracketDisposable should work with synchronous disposable resources","status":"skipped","title":"should work with synchronous disposable resources","failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracketDisposable"],"fullName":"Resource Management (bracket.ts) bracketDisposable should work with asynchronous disposable resources","status":"passed","title":"should work with asynchronous disposable resources","duration":1.161100000000033,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracketDisposable"],"fullName":"Resource Management (bracket.ts) bracketDisposable should dispose resources even when use task fails","status":"passed","title":"should dispose resources even when use task fails","duration":0.9601999999999862,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracketDisposable"],"fullName":"Resource Management (bracket.ts) bracketDisposable should throw error for non-disposable resources","status":"passed","title":"should throw error for non-disposable resources","duration":0.8898999999998978,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracketMany"],"fullName":"Resource Management (bracket.ts) bracketMany should manage multiple resources with acquisition order and reverse release order","status":"passed","title":"should manage multiple resources with acquisition order and reverse release order","duration":1.4134000000000242,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracketMany"],"fullName":"Resource Management (bracket.ts) bracketMany should release acquired resources even if later acquisitions fail","status":"passed","title":"should release acquired resources even if later acquisitions fail","duration":0.8171999999999571,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracketMany"],"fullName":"Resource Management (bracket.ts) bracketMany should handle release errors and continue releasing other resources","status":"passed","title":"should handle release errors and continue releasing other resources","duration":0.9464000000000397,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracketMany"],"fullName":"Resource Management (bracket.ts) bracketMany should throw AggregateError for multiple release failures with no use error","status":"passed","title":"should throw AggregateError for multiple release failures with no use error","duration":1.056699999999978,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracketMany"],"fullName":"Resource Management (bracket.ts) bracketMany should handle single release failure with no use error","status":"passed","title":"should handle single release failure with no use error","duration":0.7153000000000702,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","bracketMany"],"fullName":"Resource Management (bracket.ts) bracketMany should handle empty resource array","status":"passed","title":"should handle empty resource array","duration":0.3303000000000793,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","DisposableConnection example class"],"fullName":"Resource Management (bracket.ts) DisposableConnection example class should implement AsyncDisposable correctly","status":"passed","title":"should implement AsyncDisposable correctly","duration":1.6252000000000635,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","DisposableConnection example class"],"fullName":"Resource Management (bracket.ts) DisposableConnection example class should work with bracketDisposable","status":"passed","title":"should work with bracketDisposable","duration":1.2194999999999254,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","DisposableConnection example class"],"fullName":"Resource Management (bracket.ts) DisposableConnection example class should close connection only once","status":"passed","title":"should close connection only once","duration":0.7991000000000668,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Integration with error scenarios"],"fullName":"Resource Management (bracket.ts) Integration with error scenarios should handle context abort signals during resource operations","status":"passed","title":"should handle context abort signals during resource operations","duration":115.6748,"failureMessages":[],"meta":{}},{"ancestorTitles":["Resource Management (bracket.ts)","Integration with error scenarios"],"fullName":"Resource Management (bracket.ts) Integration with error scenarios should handle complex nested resource scenarios","status":"passed","title":"should handle complex nested resource scenarios","duration":2.2742999999999256,"failureMessages":[],"meta":{}}],"startTime":1749748956869,"endTime":1749748957039.2744,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/resource-management.test.ts"},{"assertionResults":[{"ancestorTitles":["Simple Bracket Test"],"fullName":"Simple Bracket Test should work with manual bracket pattern","status":"passed","title":"should work with manual bracket pattern","duration":3.6234999999999786,"failureMessages":[],"meta":{}}],"startTime":1749748958398,"endTime":1749748958401.6235,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/simple-bracket.test.ts"},{"assertionResults":[{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should execute tasks in parallel and return keyed results","status":"passed","title":"should execute tasks in parallel and return keyed results","duration":6.358200000000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should handle empty task object","status":"passed","title":"should handle empty task object","duration":0.7789999999999964,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should handle single task","status":"passed","title":"should handle single task","duration":0.7132000000000289,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should pass the same input to all tasks","status":"passed","title":"should pass the same input to all tasks","duration":0.8634000000000128,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should handle task failures correctly","status":"passed","title":"should handle task failures correctly","duration":2.4179000000000315,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should maintain type safety","status":"passed","title":"should maintain type safety","duration":1.585200000000043,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","forkJoin"],"fullName":"Structured Concurrency (structured-concurrency.ts) forkJoin should respect context overrides","status":"passed","title":"should respect context overrides","duration":1.08359999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should execute onTrue task when predicate is true","status":"passed","title":"should execute onTrue task when predicate is true","duration":3.817600000000027,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should execute onFalse task when predicate is false","status":"passed","title":"should execute onFalse task when predicate is false","duration":1.3266000000000417,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should work with async predicates","status":"passed","title":"should work with async predicates","duration":1.075400000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should pass context to predicate","status":"passed","title":"should pass context to predicate","duration":0.7608999999999924,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should handle errors in predicate","status":"passed","title":"should handle errors in predicate","duration":0.8636000000000195,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should handle errors in branch tasks","status":"passed","title":"should handle errors in branch tasks","duration":0.7810999999999808,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should support different return types from branches","status":"passed","title":"should support different return types from branches","duration":0.6591999999999985,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","ift (if-then-else)"],"fullName":"Structured Concurrency (structured-concurrency.ts) ift (if-then-else) should work with complex conditional logic","status":"passed","title":"should work with complex conditional logic","duration":0.7112999999999943,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should execute tasks in parallel and return typed tuple","status":"passed","title":"should execute tasks in parallel and return typed tuple","duration":0.7687999999999988,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should handle empty array","status":"passed","title":"should handle empty array","duration":0.44980000000003884,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should handle single task","status":"passed","title":"should handle single task","duration":0.440400000000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should execute tasks in parallel","status":"passed","title":"should execute tasks in parallel","duration":0.6720000000000255,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should handle task failures","status":"passed","title":"should handle task failures","duration":0.997099999999989,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should maintain order of results","status":"passed","title":"should maintain order of results","duration":0.9067999999999756,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","allTuple"],"fullName":"Structured Concurrency (structured-concurrency.ts) allTuple should pass same input to all tasks","status":"passed","title":"should pass same input to all tasks","duration":0.8830000000000382,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","Integration tests"],"fullName":"Structured Concurrency (structured-concurrency.ts) Integration tests should combine forkJoin and ift for complex workflows","status":"passed","title":"should combine forkJoin and ift for complex workflows","duration":1.367999999999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","Integration tests"],"fullName":"Structured Concurrency (structured-concurrency.ts) Integration tests should handle nested forkJoin operations","status":"passed","title":"should handle nested forkJoin operations","duration":1.319500000000005,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Concurrency (structured-concurrency.ts)","Integration tests"],"fullName":"Structured Concurrency (structured-concurrency.ts) Integration tests should handle complex predicate logic in ift","status":"passed","title":"should handle complex predicate logic in ift","duration":1.6499000000000024,"failureMessages":[],"meta":{}}],"startTime":1749748957521,"endTime":1749748957556.65,"status":"passed","message":"","name":"C:/Users/Pglenn/effectively/test/structured-concurrency.test.ts"}]}